@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix schema: <http://schema.org/> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix : <http://mapping.example.com/> .
@prefix cmns-id: <https://www.omg.org/spec/Commons/Identifiers/> .
@prefix d2rq: <http://www.wiwiss.fu-berlin.de/suhl/bizer/D2RQ/0.1#> .
@prefix dc: <http://purl.org/dc/elements/1.1#> .
@prefix edifact-o: <https://purl.org/edifact/ontology#> .
@prefix eli: <http://publications.europa.eu/resource/dataset/eli/> .
@prefix fnml: <http://semweb.mmlab.be/ns/fnml#> .
@prefix fno: <https://w3id.org/function/ontology#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix frapo: <http://purl.org/cerif/frapo/> .
@prefix org: <http://www.w3.org/ns/org#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix p2p-o: <https://purl.org/p2p-o#> .
@prefix p2p-o-doc: <https://purl.org/p2p-o/document#> .
@prefix p2p-o-doc-line: <https://purl.org/p2p-o/documentline#> .
@prefix p2p-o-inv: <https://purl.org/p2p-o/invoice#> .
@prefix p2p-o-item: <https://purl.org/p2p-o/item#> .
@prefix p2p-o-org: <https://purl.org/p2p-o/organization#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix schema: <http://schema.org/> .
@prefix vcard: <http://www.w3.org/2006/vcard/ns#> .

@prefix edu: <http://example.org/edu#> .
@prefix it: <http://example.org/it#> .


:Dokumentenname 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasDocumentType;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:in ("Commercial invoice" "Credit advice" "Value credit" "Value debit" "Handelsrechnung" "Gutschriftsanzeige" "Wertgutschrift" "Wertbelastung");
        sh:message "Data element 1001 is missing in the BGM segment";
    ]
.

:ExistenzBelegnummer 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasDocumentNumber;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "Data element 1004 is missing in the BGM segment";
    ]
.

:LaengeBelegnummer 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasDocumentNumber;
        sh:datatype xsd:string;
        sh:maxLength 12;
        sh:message "The data element 1004 in the BGM segment is too long";
    ]
.

:Dokumentfunktion 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasDocumentFunction;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:in ("Cancellation" "Replacement" "Duplicate" "Original" "Copy" "Additional transfer" "Stornierung" "Ersatz" "Duplikat" "Original" "Kopie" "Zusaetzliche Uebertragung");
        sh:message "Data element 1225 is missing in the BGM segment, i.e. the specification of the document function";
    ]
.

:Belegdatum 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:documentDate;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The DTM+137 segment is missing";
    ]
.

:tatsaechliches_Lieferdatum 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path p2p-o-inv:actualDeliveryDate;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The DTM+35 segment is missing"
    ]
.

:ExistenzAuftragsnummerLieferantKopf 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:orderNumberSupplier;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The supplier's order number, RFF+VN, is missing from the header";
    ]
.

:LaengeAuftragsnummerLieferantKopf 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:orderNumberSupplier;
        sh:datatype xsd:string;
        sh:maxLength 35;
        sh:message "The order number of the supplier, RFF+VN, in the header is too long";
    ]
.

:ExistenzDatumAuftragsnummerLieferantKopf 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:dateOrderNumberSupplier;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The date of the supplier's order number, RFF+VN, is missing from the header";
    ]
.

:LaengeDatumAuftragsnummerLieferantKopf 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:dateOrderNumberSupplier;
        sh:datatype xsd:string;
        sh:maxLength 8;
        sh:message "The date of the supplier's order number, RFF+VN, in the header is too long";
    ]
.

:ExistenzAuftragsnummerKaeuferKopf 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:orderNumberBuyer;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The supplier's order number, RFF+ON, is missing from the header";
    ]
.

:LaengeAuftragsnummerKaeuferKopf  
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:orderNumberBuyer;
        sh:datatype xsd:string;
        sh:maxLength 35;
        sh:message "The order number of the supplier, RFF+ON, in the header is too long";
    ]
.


:ExistenzDatumAuftragsnummerKaeuferKopf 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:dateOrderNumberBuyer;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The date of the supplier's order number, RFF+ON, is missing from the header";
    ]
.

:LaengeDatumAuftragsnummerKaeuferKopf 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:dateOrderNumberBuyer;
        sh:datatype xsd:string;
        sh:maxLength 8;
        sh:message "The date of the supplier's order number, RFF+ON, in the header is too long";
    ]
.

:ExistenzLieferscheinnummer 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:deliveryNoteNumber;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The supplier's order number, RFF+DQ, is missing";
    ]
.

:LaengeLieferscheinnummer
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:deliveryNoteNumber;
        sh:datatype xsd:string;
        sh:maxLength 35;
        sh:message "The supplier's order number, RFF+DQ, is too long";
    ]
.

:ExistenzDatumLieferscheinnummer
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:dateDeliveryNoteNumber;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The date of the supplier's order number, RFF+DQ, is missing";
    ]
.

:LaengeDatumLieferscheinnummer
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:dateDeliveryNoteNumber;
        sh:datatype xsd:string;
        sh:maxLength 8;
        sh:message "The date of the supplier's order number, RFF+DQ, is too long";
    ]
.


:ExistenzKaeufer
    a sh:NodeShape ;
    sh:targetClass edifact-o:E-Invoice;
    sh:property [
        sh:path p2p-o-inv:hasBuyer ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:message "The NAD+BY segment is missing"
    ]
.

:UmsatzsteuernummerKaeufer
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The Segemnt RFF+VA is missing for the Segemnet NAD+BY, i.e. the buyer's VAT number is missing";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/BuyerRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:VATIdentifier ;
            sh:minCount 1;
            sh:maxCount 1;
            sh:maxLength 14 ;
        ]
    ) 
.

:FormalNameKaeufer
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3036 is missing for the Segemnet NAD+BY, i.e. specification of the formal names of the buyer";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/BuyerRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:formalName ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.

:GLNKaeufer
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "Data element 3039 is missing for the Segemnet NAD+BY, i.e. specification of the GLN of the buyer.";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/BuyerRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:globalLocationNumber ;
            sh:datatype xsd:integer ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:minLength 13;
            sh:maxLength 13;
        ]
    ) 
.

:StadtKaeufer
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3164 is missing for the Segemnet NAD+BY, i.e. specification of the buyer's city";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/BuyerRole" ;
            ] 
        ]
        [
            sh:path edifact-o:hasCity ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.


:LandKaeufer
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3207 is missing for the Segemnet NAD+BY, i.e. indication of the country of the buyer";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/BuyerRole" ;
            ] 
        ]
        [
            sh:path frapo:hasCountryCode ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 3;
        ]
    ) 
.

:StrasseKaeufer
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3042 is missing for the Segemnet NAD+BY, i.e. the buyer's street address.";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/BuyerRole" ;
            ] 
        ]
        [
            sh:path vcard:hasStreetAddress ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.


:PLZKaeufer
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3251 is missing for the Segemnet NAD+BY, i.e. specification of the buyer's postal code";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/BuyerRole" ;
            ] 
        ]
        [
            sh:path vcard:postalCode ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 9;
        ]
    ) 
.


:ExistenzLieferant
    a sh:NodeShape ;
    sh:targetClass edifact-o:E-Invoice;
    sh:property [
        sh:path p2p-o-inv:hasSupplier ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:message "The NAD+SU segment is missing"
    ]
.

:UmsatzsteuernummerLieferant
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The Segemnt RFF+VA is missing for the Segemnet NAD+SU, i.e. Angbae of the VAT number of the supplier";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/SupplierRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:VATIdentifier ;
            sh:minCount 1;
            sh:maxCount 1;
            sh:maxLength 14 ;
        ]
    ) 
.

:FormalNameLieferant
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3036 is missing for the Segemnet NAD+SU, i.e. specification of the formal name of the supplier";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/SupplierRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:formalName ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.

:GLNLieferant
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3039 is missing for the Segemnet NAD+SU, i.e. specification of the GLN of the supplier";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/SupplierRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:globalLocationNumber ;
            sh:datatype xsd:integer ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:minLength 13;
            sh:maxLength 13;
        ]
    ) 
.

:StadtLieferant
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3164 is missing for the Segemnet NAD+SU, i.e. specification of the city of the supplier";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/SupplierRole" ;
            ] 
        ]
        [
            sh:path edifact-o:hasCity ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.


:LandLieferant
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "Data element 3207 is missing for the Segemnet NAD+SU, i.e. specification of the supplier's country";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/SupplierRole" ;
            ] 
        ]
        [
            sh:path frapo:hasCountryCode ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 3;
        ]
    ) 
.

:StrasseLieferant
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3042 is missing for the Segemnet NAD+SU, i.e. specification of the supplier's street";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/SupplierRole" ;
            ] 
        ]
        [
            sh:path vcard:hasStreetAddress ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.


:PLZLieferant
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3251 is missing for the Segemnet NAD+SU, i.e. specification of the supplier's postal code";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/SupplierRole" ;
            ] 
        ]
        [
            sh:path vcard:postalCode ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 9;
        ]
    ) 
.

:ExistenzRechnungsempfaenger
    a sh:NodeShape ;
    sh:targetClass edifact-o:E-Invoice;
    sh:property [
        sh:path edifact-o:hasInvoicee ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:message "The NAD+IV segment is missing"
    ]
.


:UmsatzsteuernummerRechnungsempfaenger
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The segemnt RFF+VA is missing for the segemnet NAD+IV, i.e. the VAT number of the invoice recipient is missing.";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/InvoiceeRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:VATIdentifier ;
            sh:minCount 1;
            sh:maxCount 1;
            sh:maxLength 14 
        ]
    ) 
.

:FormalNameRechnungsempfaenger
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "Data element 3036 is missing for Segemnet NAD+IV, i.e. specification of the formal name of the invoice recipient";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/InvoiceeRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:formalName ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.

:GLNRechnungsempfaenger
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3039 is missing for the Segemnet NAD+IV, i.e. specification of the GLN of the invoice recipient";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/InvoiceeRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:globalLocationNumber ;
            sh:datatype xsd:integer ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:minLength 13;
            sh:maxLength 13;
        ]
    ) 
.

:StadtRechnungsempfaenger
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3164 is missing for the Segemnet NAD+IV, i.e. specification of the city of the invoice recipient";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/InvoiceeRole" ;
            ] 
        ]
        [
            sh:path edifact-o:hasCity ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.


:LandRechnungsempfaenger
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "Data element 3207 is missing for Segemnet NAD+IV, i.e. specification of the country of the invoice recipient";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/InvoiceeRole" ;
            ] 
        ]
        [
            sh:path frapo:hasCountryCode ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 3;
        ]
    ) 
.

:StrasseRechnungsempfaenger
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "Data element 3042 is missing for Segemnet NAD+IV, i.e. specification of the invoice recipient's street address";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/InvoiceeRole" ;
            ] 
        ]
        [
            sh:path vcard:hasStreetAddress ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.


:PLZRechnungsempfaenger
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3251 is missing for the Segemnet NAD+IV, i.e. specification of the postal code of the invoice recipient";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/InvoiceeRole" ;
            ] 
        ]
        [
            sh:path vcard:postalCode ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 9;
        ]
    ) 
.


:ExistenzLieferanschrift
    a sh:NodeShape ;
    sh:targetClass edifact-o:E-Invoice;
    sh:property [
        sh:path edifact-o:hasDeliveryParty ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:message "The NAD+PR segment is missing"
    ];
.


:UmsatzsteuernummerLieferanschrift
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The Segemnt RFF+VA is missing for the Segemnet NAD+DP, i.e. the VAT number of the delivery address is missing.";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/DeliveryPartyRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:VATIdentifier ;
            sh:minCount 1;
            sh:maxCount 1;
            sh:maxLength 14 ;
        ]
    ) 
.

:FormalNameLieferanschrift
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3036 is missing for the Segemnet NAD+DP, i.e. specification of the formal name of the delivery address";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/DeliveryPartyRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:formalName ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.

:GLNLieferanschrift
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3039 is missing for the Segemnet NAD+DP, i.e. specification of the GLN of the delivery address";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/DeliveryPartyRole" ;
            ] 
        ]
        [
            sh:path p2p-o-org:globalLocationNumber ;
            sh:datatype xsd:integer ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:minLength 13;
            sh:maxLength 13;
        ]
    ) 
.

:StadtLieferanschrift
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3164 is missing for the Segemnet NAD+DP, i.e. specification of the city of the delivery address";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/DeliveryPartyRole" ;
            ] 
        ]
        [
            sh:path edifact-o:hasCity ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.


:LandLieferanschrift
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "Data element 3207 is missing for the Segemnet NAD+DP, i.e. specification of the country of the delivery address";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/DeliveryPartyRole" ;
            ] 
        ]
        [
            sh:path frapo:hasCountryCode ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 3;
        ]
    ) 
.

:StrasseLieferanschrift
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3042 is missing for the Segemnet NAD+DP, i.e. specification of the street of the delivery address";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/DeliveryPartyRole" ;
            ] 
        ]
        [
            sh:path vcard:hasStreetAddress ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 35;
        ]
    ) 
.


:PLZLieferanschrift
    a sh:NodeShape ;
    sh:targetClass org:FormalOrganization ;
    sh:message "The data element 3251 is missing for the Segemnet NAD+DP, i.e. specification of the postal code of the delivery address";
    sh:or (
        [ 
            sh:not 
            [
		        a sh:PropertyShape ;
		        sh:path rdf:type ;
		        sh:hasValue "http://example.com/DeliveryPartyRole" ;
            ] 
        ]
        [
            sh:path vcard:postalCode ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
            sh:maxCount 1;
            sh:maxLength 9;
        ]
    ) 
.


:Waehrung 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path schema:currency;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The CUX segment in the invoice header is missing";
    ]
.


:EANAtrikelnummer
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:message "The LIN segment with the value EN in data element 7143 is missing, i.e. the specification of the EAN article number or the PIA segment with the value SA in data element 7143 is missing, i.e. the specification of the supplier's article number.";
    sh:or (
        [ 
            sh:path edifact-o:hasProductIdentification;
            sh:hasValue "International Article Number" ;
            sh:datatype xsd:string;
            sh:minCount 1;
        ]
        [
            sh:path edifact-o:itemNumberSupplier ;
            sh:datatype xsd:string ;
            sh:minCount 1 ;
        ]
    ) 
.


:BerechneteMenge
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property[
        sh:path edifact-o:deliveredQuantity;
        sh:datatype xsd:float;
        sh:minCount 1;
        sh:maxCount 1;
        sh:maxLength 15;
        sh:message "The segment QTY+12 is missing, i.e. the specification of the calculated quantity."
    ]
.


:BerechneteMenge
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property[
        sh:path p2p-o-doc-line:invoicedQuantity;
        sh:datatype xsd:float;
        sh:minCount 1;
        sh:maxCount 1;
        sh:maxLength 15;
        sh:message "The segment QTY+47 is missing, i.e. the specification of the calculated quantity."
    ]
.

:BerechneteMenge
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property[
        sh:path edifact-o:hasLineItemAmount;
        sh:datatype xsd:float;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:maxLength 14;
        sh:message "The segment MOA+203 is missing, i.e. the indication of the net position price."
    ]
.

:ArtikelNettopreis
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property[
        sh:path edifact-o:hasNetpriceOfItem;
        sh:datatype xsd:float;
        sh:minCount 1;
        sh:maxCount 1;
        sh:maxLength 13;
        sh:message "The PRI+AAA segment is missing, i.e. the indication of the net price of an individual article."
    ]
.

:ArtikelBruttopreis
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property[
        sh:path edifact-o:hasGrosspriceOfItem;
        sh:datatype xsd:float;
        sh:minCount 1;
        sh:maxCount 1;
        sh:maxLength 13;
        sh:message "The PRI+AAB segment is missing, i.e. the indication of the net price of an individual article."
    ]
.

:ExistenzAuftragsnummerLieferant
    a sh:Shape;
    sh:constraint[
        sh:path edifact-o:orderNumberSupplier;
        sh:minCount 1;
        sh:message "The order number of the supplier, RFF+VN, is missing.";
    ]
.

:ExistenzAuftragsnummerLieferantArtikel
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:orderNumberSupplier;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The order number of the supplier, RFF+VN, is missing in the item part.";
    ]
.

:LaengeAuftragsnummerLieferantArtikel
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:orderNumberSupplier;
        sh:datatype xsd:string;
        sh:maxLength 35;
        sh:message "The order number of the supplier, RFF+VN, in the item part is too long.";
    ]
.

:ExistenzDatumAuftragsnummerLieferantArtikel
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:dateOrderNumberSupplier;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The date of the supplier's order number, RFF+VN, is missing in the item part.";
    ]
.

:LaengeDatumAuftragsnummerLieferantArtikel
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:dateOrderNumberSupplier;
        sh:datatype xsd:string;
        sh:maxLength 8;
        sh:message "The date of the supplier's order number, RFF+VN, in the item section must be long enough.";
    ]
.


:ExistenzAuftragsnummerKaeuferArtikel
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:orderNumberBuyer;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The order number of the supplier, RFF+ON, is missing in the item part.";
    ]
.

:LaengeAuftragsnummerKaeuferArtikel 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:orderNumberBuyer;
        sh:datatype xsd:string;
        sh:maxLength 35;
        sh:message "The order number of the supplier, RFF+ON, in the item part is too long.";
    ]
.


:ExistenzDatumAuftragsnummerKaeuferArtikel 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:dateOrderNumberBuyer;
        sh:datatype xsd:string;
        sh:minCount 1;
        sh:maxCount 1;
        sh:message "The date of the supplier's order number, RFF+ON, is missing in the item part.";
    ]
.

:LaengeDatumAuftragsnummerKaeuferArtikel 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:dateOrderNumberBuyer;
        sh:datatype xsd:string;
        sh:maxLength 8;
        sh:message "The date of the supplier's order number, RFF+ON, in the item part is too long.";
    ]
.



:Rechnungsbetrag
    a sh:NodeShape;
    sh:targetClass  edifact-o:InvoiceDetails;
    sh:property[
        sh:path edifact-o:hasInvoiceAmount ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:maxLength 14;
        sh:message "The segment MOA+77 is missing, i.e. the invoice amount is missing."
    ]
.

:Gesamtpositionsbetrag
    a sh:NodeShape;
    sh:targetClass  edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasTotalLineItemAmount ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:message "The segment MOA+79 is missing, i.e. the indication of the total position amount."
   ]
.

:SummeZuAbschlaege    
    a sh:NodeShape;
    sh:targetClass  edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasTotalAdditionsAndDeductions ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:message "The segment MOA+131 is missing, i.e. the indication of the sums of the additions/deductions."
   ]
.

:SteuerpflichtigerBetrag
    a sh:NodeShape;
    sh:targetClass  edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasTaxableAmount ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:message "The segment MOA+125 is missing, i.e. the indication of the taxable amount."
    ]
.


:zusaetzlichePartneridentifikation
    a sh:NodeShape;
    sh:targetClass  org:FormalOrganization;
    sh:property [
        sh:path edifact-o:additionalPartnerIdentificationEANCode ;
        sh:datatype xsd:string ;
        sh:maxCount 1;
        sh:maxLength 35;
        sh:message "The RFF+API segment is incorrect, i.e. the specification of the additional partner identification."
   ]
.

:Zahlungsbedingung 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:paymentCondition;
        sh:datatype xsd:string;
        sh:maxCount 5;
        sh:in ("As usual" "Extended" "Wie ueblich" "Verlaengert");
        sh:message "The specified payment term is not one of the expected values, i.e. data element 4279 in the PAT segment is not equal to 1 or 7.";
    ]
.

:ValutaDatum 
    a sh:NodeShape;
    sh:targetClass edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:valutaDate;
        sh:datatype xsd:string;
        sh:maxCount 1;
        sh:maxLength 8; 
        sh:message "The specified value date is too long, i.e. the DTM+209.";
    ]
.


:Abschlag 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:hasAllowanceReason;
        sh:datatype xsd:string;
        sh:minLength 1;
        sh:maxCount 15;
        sh:message "The data element 7160 or 7161 is missing in the ALC segment, i.e. the tee type specification.";
    ]
.

:Rabatt 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:hasDiscountReason;
        sh:datatype xsd:string;
        sh:minLength 1;
        sh:maxCount 15;
        sh:message "The data element 7160 or 7161 is missing in the ALC segment, i.e. the tee type specification.";
    ]
.

:Zuschlag 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:hasChargeReason;
        sh:datatype xsd:string;
        sh:minLength 1;
        sh:maxCount 15;
        sh:message "The data element 7160 or 7161 is missing in the ALC segment, i.e. the specification surcharge type.";
    ]
.

:AbschlagProzentsatz 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:hasAllowancePercentage;
        sh:datatype xsd:float;
        sh:minLength 1;
        sh:maxLength 5;
        sh:maxCount 15;
        sh:message "The data element 5245 or 5482 is missing in the PCD segment, i.e. the percentage type and amount of the discount.";
    ]
.

:RabattProzentsatz 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:hasDiscountPercentage;
        sh:datatype xsd:float;
        sh:minLength 1;
        sh:maxLength 5;
        sh:maxCount 15;
        sh:message "The data element 5245 or 5482 is missing in the PCD segment, i.e. the percentage type and amount of the discount.";
    ]
.

:ZuschlagProzentsatz 
    a sh:NodeShape;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path edifact-o:hasChargePercentage;
        sh:datatype xsd:float;
        sh:minLength 1;
        sh:maxLength 5;
        sh:maxCount 15;
        sh:message "The data element 5245 or 5482 is missing in the PCD segment, i.e. the percentage type and amount of the surcharge.";
    ]
.

:BruttoendbetragRechnunng 
    a sh:NodeShape;
    sh:targetClass  edifact-o:item;
    sh:message "The segment MOA+8, MOA+23 or MOA+204 is incorrect, i.e. the indication of the gross final amount of the invoice.";
    sh:or(
        [
            sh:path p2p-o-inv:hasAllowanceAmount ;
            sh:maxCount 2;
            sh:maxLength 13;
        ]
        [
            sh:path edifact-o:hasDiscountAmount ;
            sh:maxCount 2;
            sh:maxLength 13;
        ]
   )
.

:SteuerangabenItem
    a sh:NodeShape;
    sh:targetClass  edifact-o:item;
    sh:property [
        sh:path edifact-o:hasVATrate ;
        sh:maxCount 5;
        sh:maxLength 5;
        sh:message "The TAX segment at item level is incorrect, i.e. the specification of the tax rate; TAX; SG 21; header part; is incorrect."
   ]
.

:Produktidentifikation
    a sh:NodeShape ;
    sh:targetClass edifact-o:item;
    sh:property [
        sh:path p2p-o-item:itemName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:message "The data element 7008 in the IMD segment is incorrect, i.e. the specification of the article name."
   ]
.

:Steuerbetrag    
    a sh:NodeShape;
    sh:targetClass  edifact-o:item;
    sh:property [
        sh:path edifact-o:hasTaxAmount ;
        sh:maxCount 1;
        sh:maxLength 13;
        sh:message "The segment MOA+124 is incorrect, i.e. the tax amount is not specified."
   ]
.


:ZuAbschlagbetrag
    a sh:NodeShape;
    sh:targetClass  edifact-o:item;
    sh:message "The segment MOA+23 or MOA+204 is incorrect, i.e. the specification of the surcharge or discount amount is incorrect.";
    sh:or(
        [
            sh:path p2p-o-inv:hasAllowanceAmount ;
            sh:maxCount 2;
            sh:maxLength 18;
            sh:message "Das Segment MOA+23 fehlt"
        ]
        [
            sh:path edifact-o:hasDiscountAmount ;
            sh:maxCount 2;
            sh:maxLength 18;
            sh:message "Das Segment MOA+204 fehlt"
        ]
   )
.


:BasisZuAbschlagbetrag    
    a sh:NodeShape;
    sh:targetClass  edifact-o:item;
    sh:property [
        sh:path edifact-o:hasAdditionDeductionBasis ;
        sh:maxCount 1;
        sh:maxLength 13;
        sh:message "The MOA+25 segment is incorrect, i.e. the base amount of the surcharge or discount is incorrect."
   ]
.

:SteuerangabenItem
    a sh:NodeShape;
    sh:targetClass  edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasVATrate ;
        sh:maxCount 5;
        sh:maxLength 5;
        sh:message "The TAX segment at totals level is incorrect, i.e. the specification of the tax rate."
   ]
.

:Steuerbetrag    
    a sh:NodeShape;
    sh:targetClass  edifact-o:InvoiceDetails;
    sh:property [
        sh:path edifact-o:hasTaxAmount ;
        sh:maxCount 1;
        sh:maxLength 13;
        sh:message "The segment MOA+124 is incorrect, i.e. the tax amount is not specified."
   ]
.

:Prozesszugehoerigkeit 
    a sh:NodeShape ;
    sh:targetClass edifact-o:E-Invoice;
    sh:property [
        sh:path edifact-o:belongsToProcess ;
        sh:minCount 1 ;
        sh:maxCount 1;
        sh:hasValue "ProcessExample"
    ]
.

:SumNetPrice a sh:NodeShape ;
    sh:targetClass edifact-o:InvoiceDetails ;
    sh:sparql [
        a sh:SPARQLConstraint ;
        sh:message "edifact-o:hasTotalLineItemAmount must equal the sum of all values of edifact-o:hasLineItemAmount";
        sh:prefixes [ sh:declare [
                sh:prefix "edifact-o" ;
                sh:namespace "https://purl.org/edifact/ontology#"^^xsd:anyURI ; ] ] ;
        sh:select
        """SELECT $this (edifact-o:hasTotalLineItemAmount AS ?path) (?totalAmount AS ?value)
            WHERE { 
                $this a edifact-o:InvoiceDetails ;
                    edifact-o:hasTotalLineItemAmount ?totalAmount .
                    {select $this (sum(?itemAmount) as ?sum) {
                        ?item edifact-o:isItemOf ?invoice ; edifact-o:hasLineItemAmount ?itemAmount.
                        ?invoice edifact-o:hasInvoiceDetails $this.
                        } 
                        group by $this }
                FILTER (?sum != ?totalAmount) 
                }""" ; 
            ] .

####EDUCATION
:StudentProfileShape
    a sh:NodeShape ;
    sh:targetClass edu:StudentProfile ;
    sh:and (
        [ sh:property [
            sh:path edu:studentNumber ;
            sh:datatype xsd:string ;
            sh:minLength 6
        ] ]
        [ sh:property [
            sh:path edu:registrationDate ;
            sh:datatype xsd:date ;
            sh:minCount 1
        ] ]
    ) ;
    sh:message "Student profile must include a student number and a registration date." .

:CourseCatalogShape
    a sh:NodeShape ;
    sh:targetClass edu:CourseCatalog ;
    sh:and (
        [ sh:property [
            sh:path edu:courseTitle ;
            sh:datatype xsd:string ;
            sh:minLength 5
        ] ]
        [ sh:property [
            sh:path edu:creditValue ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
            sh:maxInclusive 20
        ] ]
    ) ;
    sh:message "Each course must have a valid title and credit value between 1 and 20." .

:FacultyMemberShape
    a sh:NodeShape ;
    sh:targetClass edu:FacultyMember ;
    sh:and (
        [ sh:property [
            sh:path edu:employeeID ;
            sh:datatype xsd:string ;
            sh:minLength 5
        ] ]
        [ sh:property [
            sh:path edu:fullName ;
            sh:datatype xsd:string ;
            sh:minLength 3
        ] ]
    ) ;
    sh:message "Faculty member must have an employee ID and full name." .

:ResearchProjectShape
    a sh:NodeShape ;
    sh:targetClass edu:ResearchProject ;
    sh:and (
        [ sh:property [
            sh:path edu:projectID ;
            sh:datatype xsd:string ;
            sh:minCount 1
        ] ]
        [ sh:property [
            sh:path edu:fundingAmount ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0
        ] ]
    ) ;
    sh:message "Research projects must have a project ID and funding amount." .

:ThesisSubmissionShape
    a sh:NodeShape ;
    sh:targetClass edu:ThesisSubmission ;
    sh:and (
        [ sh:property [
            sh:path edu:submissionDate ;
            sh:datatype xsd:date ;
            sh:minCount 1
        ] ]
        [ sh:property [
            sh:path edu:evaluator ;
            sh:node edu:Professor ;
            sh:minCount 1
        ] ]
    ) ;
    sh:message "Thesis submissions must include submission date and at least one evaluator." .

:LibraryMemberShape
    a sh:NodeShape ;
    sh:targetClass edu:LibraryMember ;
    sh:and (
        [ sh:property [
            sh:path edu:membershipID ;
            sh:datatype xsd:string ;
            sh:minLength 4
        ] ]
        [ sh:property [
            sh:path edu:expiryDate ;
            sh:datatype xsd:date ;
            sh:minCount 1
        ] ]
    ) ;
    sh:message "Library membership must include a valid ID and expiry date." .

:ClassScheduleShape
    a sh:NodeShape ;
    sh:targetClass edu:ClassSchedule ;
    sh:and (
        [ sh:property [
            sh:path edu:timeSlot ;
            sh:datatype xsd:string ;
            sh:minLength 3
        ] ]
        [ sh:property [
            sh:path edu:location ;
            sh:datatype xsd:string ;
            sh:minLength 3
        ] ]
    ) ;
    sh:message "Class schedule must include time slot and location." .

:GradingPolicyShape
    a sh:NodeShape ;
    sh:targetClass edu:GradingPolicy ;
    sh:and (
        [ sh:property [
            sh:path edu:gradeScale ;
            sh:in ("A" "B" "C" "D" "F") ;
        ] ]
        [ sh:property [
            sh:path edu:passThreshold ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 100.0
        ] ]
    ) ;
    sh:message "Grading policy must include a valid scale and threshold score." .

:InternshipShape
    a sh:NodeShape ;
    sh:targetClass edu:Internship ;
    sh:and (
        [ sh:property [
            sh:path edu:companyName ;
            sh:datatype xsd:string ;
            sh:minLength 2
        ] ]
        [ sh:property [
            sh:path edu:startDate ;
            sh:datatype xsd:date ;
            sh:minCount 1
        ] ]
    ) ;
    sh:message "Internship must include company name and start date." .

:EnrollmentStatusShape
    a sh:NodeShape ;
    sh:targetClass edu:EnrollmentStatus ;
    sh:and (
        [ sh:property [
            sh:path edu:isActive ;
            sh:datatype xsd:boolean ;
        ] ]
        [ sh:property [
            sh:path edu:semesterName ;
            sh:datatype xsd:string ;
            sh:minLength 3
        ] ]
    ) ;
    sh:message "Enrollment status must indicate if active and specify the semester." .

:DigitalBadgeShape
    a sh:NodeShape ;
    sh:targetClass edu:DigitalBadge ;
    sh:and (
        [ sh:property [
            sh:path edu:badgeTitle ;
            sh:datatype xsd:string ;
            sh:minLength 4
        ] ]
        [ sh:property [
            sh:path edu:issuedOn ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Each digital badge must have a title and issue date." .

:AlumniRecordShape
    a sh:NodeShape ;
    sh:targetClass edu:AlumniRecord ;
    sh:and (
        [ sh:property [
            sh:path edu:graduationYear ;
            sh:datatype xsd:gYear ;
        ] ]
        [ sh:property [
            sh:path edu:degreeAwarded ;
            sh:datatype xsd:string ;
            sh:minLength 3
        ] ]
    ) ;
    sh:message "Alumni record must contain graduation year and awarded degree." .

:LearningOutcomeShape
    a sh:NodeShape ;
    sh:targetClass edu:LearningOutcome ;
    sh:and (
        [ sh:property [
            sh:path edu:outcomeText ;
            sh:datatype xsd:string ;
            sh:minLength 10
        ] ]
        [ sh:property [
            sh:path edu:linkedCourse ;
            sh:node edu:Course ;
            sh:minCount 1
        ] ]
    ) ;
    sh:message "Learning outcome must describe the result and be linked to a course." .

:AcademicAlertShape
    a sh:NodeShape ;
    sh:targetClass edu:AcademicAlert ;
    sh:and (
        [ sh:property [
            sh:path edu:alertType ;
            sh:in ("Low GPA" "Attendance" "Plagiarism") ;
        ] ]
        [ sh:property [
            sh:path edu:triggeredOn ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Academic alert must include type and trigger date." .

:StudyAbroadShape
    a sh:NodeShape ;
    sh:targetClass edu:StudyAbroad ;
    sh:and (
        [ sh:property [
            sh:path edu:hostUniversity ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path edu:exchangePeriod ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Study abroad info must include host university and exchange period." .

:AttendanceLogShape
    a sh:NodeShape ;
    sh:targetClass edu:AttendanceLog ;
    sh:and (
        [ sh:property [
            sh:path edu:presentStatus ;
            sh:in ("Present" "Absent" "Excused") ;
        ] ]
        [ sh:property [
            sh:path edu:dateRecorded ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Attendance log must include present status and date." .

:CapstoneProjectShape
    a sh:NodeShape ;
    sh:targetClass edu:CapstoneProject ;
    sh:and (
        [ sh:property [
            sh:path edu:projectTitle ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path edu:finalScore ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 100.0 ;
        ] ]
    ) ;
    sh:message "Capstone project must have a title and a score between 0 and 100." .

:CertificationRecordShape
    a sh:NodeShape ;
    sh:targetClass edu:CertificationRecord ;
    sh:and (
        [ sh:property [
            sh:path edu:certificateName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path edu:validUntil ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Certification record must include a name and a valid until date." .

:DisciplinaryActionShape
    a sh:NodeShape ;
    sh:targetClass edu:DisciplinaryAction ;
    sh:and (
        [ sh:property [
            sh:path edu:violationType ;
            sh:in ("Cheating" "Harassment" "Forgery") ;
        ] ]
        [ sh:property [
            sh:path edu:resolved ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Disciplinary actions must specify type and resolution status." .

:ExchangeProgramShape
    a sh:NodeShape ;
    sh:targetClass edu:ExchangeProgram ;
    sh:and (
        [ sh:property [
            sh:path edu:partnerInstitution ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path edu:languageOfInstruction ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Exchange programs must specify partner institution and instruction language." .

:MentorshipProgramShape
    a sh:NodeShape ;
    sh:targetClass edu:MentorshipProgram ;
    sh:and (
        [ sh:property [
            sh:path edu:mentor ;
            sh:qualifiedValueShape [
                sh:class edu:FacultyMember
            ] ;
            sh:qualifiedMinCount 1 ;
        ] ]
        [ sh:property [
            sh:path edu:menteeCount ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Mentorship program must have at least one faculty mentor and a mentee count." .

:LanguageTestShape
    a sh:NodeShape ;
    sh:targetClass edu:LanguageTest ;
    sh:and (
        [ sh:property [
            sh:path edu:testName ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path edu:resultScore ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 100.0 ;
        ] ]
    ) ;
    sh:message "Language test must have a name and a score between 0 and 100." .

:StudentLoanShape
    a sh:NodeShape ;
    sh:targetClass edu:StudentLoan ;
    sh:and (
        [ sh:property [
            sh:path edu:loanAmount ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
        [ sh:property [
            sh:path edu:repaymentTerm ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Student loan must include loan amount and repayment term." .

:TeachingAssignmentShape
    a sh:NodeShape ;
    sh:targetClass edu:TeachingAssignment ;
    sh:and (
        [ sh:property [
            sh:path edu:assignedFaculty ;
            sh:node edu:FacultyMember ;
            sh:minCount 1 ;
        ] ]
        [ sh:property [
            sh:path edu:teachingHours ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Teaching assignment must include a faculty member and the number of hours." .

:HonorRollShape
    a sh:NodeShape ;
    sh:targetClass edu:HonorRoll ;
    sh:and (
        [ sh:property [
            sh:path edu:studentName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path edu:GPA ;
            sh:datatype xsd:float ;
            sh:minInclusive 3.5 ;
            sh:maxInclusive 4.0 ;
        ] ]
    ) ;
    sh:message "Honor roll entry must include student name and GPA ≥ 3.5." .

:EventParticipationShape
    a sh:NodeShape ;
    sh:targetClass edu:EventParticipation ;
    sh:and (
        [ sh:property [
            sh:path edu:eventType ;
            sh:in ("Conference" "Workshop" "Competition") ;
        ] ]
        [ sh:property [
            sh:path edu:participantID ;
            sh:datatype xsd:string ;
            sh:minLength 4 ;
        ] ]
    ) ;
    sh:message "Event participation must include the event type and participant ID." .

:FinalExamShape
    a sh:NodeShape ;
    sh:targetClass edu:FinalExam ;
    sh:and (
        [ sh:property [
            sh:path edu:examCode ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path edu:durationMinutes ;
            sh:datatype xsd:integer ;
            sh:minInclusive 30 ;
        ] ]
    ) ;
    sh:message "Final exam must include an exam code and a duration in minutes." .

:OnlineCourseShape
    a sh:NodeShape ;
    sh:targetClass edu:OnlineCourse ;
    sh:and (
        [ sh:property [
            sh:path edu:platform ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path edu:url ;
            sh:datatype xsd:anyURI ;
        ] ]
    ) ;
    sh:message "Online course must specify platform and course URL." .

:ExtracurricularShape
    a sh:NodeShape ;
    sh:targetClass edu:Extracurricular ;
    sh:and (
        [ sh:property [
            sh:path edu:activityName ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path edu:weeklyHours ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Extracurricular record must include activity name and hours per week." .

:ScholarshipApplicationShape
    a sh:NodeShape ;
    sh:targetClass edu:ScholarshipApplication ;
    sh:or (
        [ sh:property [
            sh:path edu:GPA ;
            sh:datatype xsd:float ;
            sh:minInclusive 3.0 ;
        ] ]
        [ sh:property [
            sh:path edu:essaySubmitted ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
    ) ;
    sh:message "Applicant must either have a GPA ≥ 3.0 or have submitted an essay." .


#### IT structure 

:ServerSpecShape
    a sh:NodeShape ;
    sh:targetClass it:ServerSpec ;
    sh:and (
        [ sh:property [
            sh:path it:cpuCores ;
            sh:datatype xsd:integer ;
            sh:minInclusive 2 ;
        ] ]
        [ sh:property [
            sh:path it:ramGB ;
            sh:datatype xsd:integer ;
            sh:minInclusive 4 ;
        ] ]
    ) ;
    sh:message "Each server must specify at least 2 CPU cores and 4GB RAM." .

:OperatingSystemShape
    a sh:NodeShape ;
    sh:targetClass it:OperatingSystem ;
    sh:property [
        sh:path it:osName ;
        sh:datatype xsd:string ;
        sh:minLength 3 ;
        sh:message "Operating system name must be a valid string." ;
    ] ;
    sh:property [
        sh:path it:version ;
        sh:datatype xsd:string ;
        sh:message "Each OS must include a version string." ;
    ] .

:ProtocolSupportShape
    a sh:NodeShape ;
    sh:targetClass it:ProtocolSupport ;
    sh:property [
        sh:path it:protocolType ;
        sh:in ("HTTP" "HTTPS" "FTP" "SSH" "SFTP") ;
        sh:message "Protocol must be one of the supported types." ;
    ] ;
    sh:property [
        sh:path it:isEncrypted ;
        sh:datatype xsd:boolean ;
        sh:message "You must specify whether the protocol is encrypted." ;
    ] .

:FirewallRuleShape
    a sh:NodeShape ;
    sh:targetClass it:FirewallRule ;
    sh:and (
        [ sh:property [
            sh:path it:portNumber ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
            sh:maxInclusive 65535 ;
        ] ]
        [ sh:property [
            sh:path it:ruleAction ;
            sh:in ("Allow" "Deny") ;
        ] ]
    ) ;
    sh:message "Firewall rule must define a valid port and an allow/deny action." .

:AccessCredentialShape
    a sh:NodeShape ;
    sh:targetClass it:AccessCredential ;
    sh:and (
        [ sh:property [
            sh:path it:username ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path it:passwordHash ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Each access credential must include a username and password hash." .

:SystemLogPolicyShape
    a sh:NodeShape ;
    sh:targetClass it:SystemLogPolicy ;
    sh:and (
        [ sh:property [
            sh:path it:logRetentionDays ;
            sh:datatype xsd:integer ;
            sh:minInclusive 7 ;
        ] ]
        [ sh:property [
            sh:path it:isRotationEnabled ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Log policies must specify retention days and whether rotation is enabled." .

:BackupScheduleShape
    a sh:NodeShape ;
    sh:targetClass it:BackupSchedule ;
    sh:property [
        sh:path it:frequency ;
        sh:in ("Daily" "Weekly" "Monthly") ;
        sh:message "Backup frequency must be one of: Daily, Weekly, or Monthly." ;
    ] ;
    sh:property [
        sh:path it:isEncrypted ;
        sh:datatype xsd:boolean ;
        sh:message "You must declare whether the backup is encrypted." ;
    ] .

:SSHConfigShape
    a sh:NodeShape ;
    sh:targetClass it:SSHConfig ;
    sh:property [
        sh:path it:port ;
        sh:datatype xsd:integer ;
        sh:hasValue 22 ;
        sh:message "SSH must use port 22 unless configured otherwise." ;
    ] ;
    sh:property [
        sh:path it:keyBasedAuth ;
        sh:datatype xsd:boolean ;
        sh:hasValue true ;
        sh:message "SSH configuration must enforce key-based authentication." ;
    ] .

:DiskQuotaShape
    a sh:NodeShape ;
    sh:targetClass it:DiskQuota ;
    sh:and (
        [ sh:property [
            sh:path it:allocatedGB ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
        [ sh:property [
            sh:path it:mountPoint ;
            sh:datatype xsd:string ;
            sh:minLength 2 ;
        ] ]
    ) ;
    sh:message "Disk quota must define allocated space and a valid mount point." .

:AdminRoleShape
    a sh:NodeShape ;
    sh:targetClass it:AdminRole ;
    sh:or (
        [ sh:property [
            sh:path it:privilegeLevel ;
            sh:datatype xsd:integer ;
            sh:minInclusive 5 ;
        ] ]
        [ sh:property [
            sh:path it:hasFullAccess ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
    ) ;
    sh:message "Admin role must either have privilege level ≥ 5 or full access enabled."

 
:UserAccountShape
    a sh:NodeShape ;
    sh:targetClass it:UserAccount ;
    sh:and (
        [ sh:property [
            sh:path it:username ;
            sh:datatype xsd:string ;
            sh:minLength 4 ;
        ] ]
        [ sh:property [
            sh:path it:isActive ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "User accounts must specify a username and indicate whether the account is active." .

:TLSCertificateShape
    a sh:NodeShape ;
    sh:targetClass it:TLSCertificate ;
    sh:and (
        [ sh:property [
            sh:path it:issuer ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path it:validUntil ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "TLS certificates must specify an issuer and an expiration date." .

:PortBindingShape
    a sh:NodeShape ;
    sh:targetClass it:PortBinding ;
    sh:and (
        [ sh:property [
            sh:path it:boundPort ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
            sh:maxInclusive 65535 ;
        ] ]
        [ sh:property [
            sh:path it:protocol ;
            sh:in ("TCP" "UDP") ;
        ] ]
    ) ;
    sh:message "Port bindings must define a valid port number and either TCP or UDP protocol." .

:DatabaseConnectionShape
    a sh:NodeShape ;
    sh:targetClass it:DatabaseConnection ;
    sh:and (
        [ sh:property [
            sh:path it:connectionURL ;
            sh:datatype xsd:anyURI ;
        ] ]
        [ sh:property [
            sh:path it:timeoutSeconds ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Database connection must include a URL and a timeout value in seconds." .

:AccessTokenShape
    a sh:NodeShape ;
    sh:targetClass it:AccessToken ;
    sh:and (
        [ sh:property [
            sh:path it:tokenValue ;
            sh:datatype xsd:string ;
            sh:minLength 10 ;
        ] ]
        [ sh:property [
            sh:path it:expiresAt ;
            sh:datatype xsd:dateTime ;
        ] ]
    ) ;
    sh:message "Access token must include a token value and an expiration timestamp." .
Would you like me to continue with shapes 16 to 20?

:LoadBalancerConfigShape
    a sh:NodeShape ;
    sh:targetClass it:LoadBalancerConfig ;
    sh:and (
        [ sh:property [
            sh:path it:algorithm ;
            sh:in ("RoundRobin" "LeastConnections" "IPHash") ;
        ] ]
        [ sh:property [
            sh:path it:healthCheckEnabled ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Load balancer config must specify an algorithm and whether health checks are enabled." .

:EnvironmentVariableShape
    a sh:NodeShape ;
    sh:targetClass it:EnvironmentVariable ;
    sh:and (
        [ sh:property [
            sh:path it:variableName ;
            sh:datatype xsd:string ;
            sh:minLength 2 ;
        ] ]
        [ sh:property [
            sh:path it:value ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Environment variables must include a name and a value." .

:StorageMountShape
    a sh:NodeShape ;
    sh:targetClass it:StorageMount ;
    sh:and (
        [ sh:property [
            sh:path it:mountPath ;
            sh:datatype xsd:string ;
            sh:minLength 1 ;
        ] ]
        [ sh:property [
            sh:path it:filesystemType ;
            sh:in ("ext4" "xfs" "ntfs") ;
        ] ]
    ) ;
    sh:message "Storage mount must define a path and a supported filesystem type." .

:ScheduledJobShape
    a sh:NodeShape ;
    sh:targetClass it:ScheduledJob ;
    sh:and (
        [ sh:property [
            sh:path it:jobName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path it:cronExpression ;
            sh:datatype xsd:string ;
            sh:minLength 9 ;
        ] ]
    ) ;
    sh:message "Scheduled jobs must have a name and a valid cron expression." .

:ContainerDeploymentShape
    a sh:NodeShape ;
    sh:targetClass it:ContainerDeployment ;
    sh:and (
        [ sh:property [
            sh:path it:imageName ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path it:replicaCount ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Container deployments must specify an image name and at least one replica." .

 
:DNSConfigShape
    a sh:NodeShape ;
    sh:targetClass it:DNSConfig ;
    sh:and (
        [ sh:property [
            sh:path it:primaryDNS ;
            sh:datatype xsd:string ;
            sh:pattern "^\\d{1,3}(\\.\\d{1,3}){3}$" ;
        ] ]
        [ sh:property [
            sh:path it:secondaryDNS ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "DNS configuration must include a valid primary IP address and optionally a secondary one." .

:ApiRateLimitShape
    a sh:NodeShape ;
    sh:targetClass it:ApiRateLimit ;
    sh:and (
        [ sh:property [
            sh:path it:limitPerMinute ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
        [ sh:property [
            sh:path it:burstLimit ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "API rate limits must specify per-minute and burst limits." .

:ProxyServerShape
    a sh:NodeShape ;
    sh:targetClass it:ProxyServer ;
    sh:and (
        [ sh:property [
            sh:path it:proxyAddress ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path it:requiresAuthentication ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Proxy servers must define an address and whether authentication is required." .

:MonitoringAgentShape
    a sh:NodeShape ;
    sh:targetClass it:MonitoringAgent ;
    sh:and (
        [ sh:property [
            sh:path it:agentID ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path it:isActive ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Monitoring agent must have an ID and indicate if it is active." .

:AlertRuleShape
    a sh:NodeShape ;
    sh:targetClass it:AlertRule ;
    sh:or (
        [ sh:property [
            sh:path it:thresholdValue ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
        [ sh:property [
            sh:path it:expression ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
    ) ;
    sh:message "Alert rules must define either a numeric threshold or a condition expression." .

:NetworkInterfaceShape
    a sh:NodeShape ;
    sh:targetClass it:NetworkInterface ;
    sh:and (
        [ sh:property [
            sh:path it:interfaceName ;
            sh:datatype xsd:string ;
            sh:minLength 2 ;
        ] ]
        [ sh:property [
            sh:path it:macAddress ;
            sh:datatype xsd:string ;
            sh:pattern "^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$" ;
        ] ]
    ) ;
    sh:message "Network interface must have a name and a valid MAC address." .

:AccessPolicyShape
    a sh:NodeShape ;
    sh:targetClass it:AccessPolicy ;
    sh:and (
        [ sh:property [
            sh:path it:role ;
            sh:in ("Admin" "Editor" "Viewer") ;
        ] ]
        [ sh:property [
            sh:path it:resource ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Access policies must define a role and the associated resource." .

:ErrorLogShape
    a sh:NodeShape ;
    sh:targetClass it:ErrorLog ;
    sh:and (
        [ sh:property [
            sh:path it:errorCode ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path it:timestamp ;
            sh:datatype xsd:dateTime ;
        ] ]
    ) ;
    sh:message "Error logs must include an error code and timestamp." .

:WebServerConfigShape
    a sh:NodeShape ;
    sh:targetClass it:WebServerConfig ;
    sh:and (
        [ sh:property [
            sh:path it:documentRoot ;
            sh:datatype xsd:string ;
            sh:minLength 1 ;
        ] ]
        [ sh:property [
            sh:path it:sslEnabled ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Web server config must specify document root and whether SSL is enabled." .

:TokenRevocationShape
    a sh:NodeShape ;
    sh:targetClass it:TokenRevocation ;
    sh:and (
        [ sh:property [
            sh:path it:tokenID ;
            sh:datatype xsd:string ;
            sh:minLength 8 ;
        ] ]
        [ sh:property [
            sh:path it:revokedAt ;
            sh:datatype xsd:dateTime ;
        ] ]
    ) ;
    sh:message "Revoked tokens must include token ID and the revocation timestamp." .



    #Product Catalogs Domain

:ProductShape
    a sh:NodeShape ;
    sh:targetClass catalog:Product ;
    sh:and (
        [ sh:property [
            sh:path catalog:productName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path catalog:productID ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
    ) ;
    sh:message "Each product must have a name and a product ID." .

:PriceShape
    a sh:NodeShape ;
    sh:targetClass catalog:PriceDetail ;
    sh:and (
        [ sh:property [
            sh:path catalog:priceValue ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
        [ sh:property [
            sh:path catalog:currency ;
            sh:in ("USD" "EUR" "INR" "GBP") ;
        ] ]
    ) ;
    sh:message "Price must be non-negative and include a valid currency code." .

:InventoryShape
    a sh:NodeShape ;
    sh:targetClass catalog:InventoryRecord ;
    sh:and (
        [ sh:property [
            sh:path catalog:stockQuantity ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
        [ sh:property [
            sh:path catalog:warehouseLocation ;
            sh:datatype xsd:string ;
            sh:minLength 2 ;
        ] ]
    ) ;
    sh:message "Inventory must specify stock quantity and warehouse location." .

:DiscountPolicyShape
    a sh:NodeShape ;
    sh:targetClass catalog:DiscountPolicy ;
    sh:and (
        [ sh:property [
            sh:path catalog:discountRate ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 100.0 ;
        ] ]
        [ sh:property [
            sh:path catalog:validUntil ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Discount policy must include a rate between 0 and 100, and a validity date." .

:CategoryAssignmentShape
    a sh:NodeShape ;
    sh:targetClass catalog:CategoryAssignment ;
    sh:and (
        [ sh:property [
            sh:path catalog:assignedCategory ;
            sh:nodeKind sh:IRI ;
        ] ]
        [ sh:property [
            sh:path catalog:priority ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Category assignment must include a category and a priority value." .

:SupplierInfoShape
    a sh:NodeShape ;
    sh:targetClass catalog:SupplierInfo ;
    sh:and (
        [ sh:property [
            sh:path catalog:supplierName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path catalog:supplierRating ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 5.0 ;
        ] ]
    ) ;
    sh:message "Supplier info must include name and a rating between 0 and 5." .

:ProductImageShape
    a sh:NodeShape ;
    sh:targetClass catalog:ProductImage ;
    sh:and (
        [ sh:property [
            sh:path catalog:imageURL ;
            sh:datatype xsd:anyURI ;
        ] ]
        [ sh:property [
            sh:path catalog:imageType ;
            sh:in ("thumbnail" "main" "zoomed") ;
        ] ]
    ) ;
    sh:message "Product image must have a valid URL and type." .

:CustomerReviewShape
    a sh:NodeShape ;
    sh:targetClass catalog:CustomerReview ;
    sh:and (
        [ sh:property [
            sh:path catalog:reviewerName ;
            sh:datatype xsd:string ;
            sh:minLength 2 ;
        ] ]
        [ sh:property [
            sh:path catalog:rating ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 5.0 ;
        ] ]
    ) ;
    sh:message "Customer review must include a reviewer name and rating (0–5)." .

:ReturnPolicyShape
    a sh:NodeShape ;
    sh:targetClass catalog:ReturnPolicy ;
    sh:and (
        [ sh:property [
            sh:path catalog:returnWindowDays ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
        [ sh:property [
            sh:path catalog:restockingFee ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Return policy must specify return window and optional restocking fee." .

:BundleDealShape
    a sh:NodeShape ;
    sh:targetClass catalog:BundleDeal ;
    sh:and (
        [ sh:property [
            sh:path catalog:bundleItems ;
            sh:minCount 2 ;
        ] ]
        [ sh:property [
            sh:path catalog:bundlePrice ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Bundle deals must include at least 2 items and a bundle price." .
:ProductDimensionShape
    a sh:NodeShape ;
    sh:targetClass catalog:ProductDimension ;
    sh:and (
        [ sh:property [
            sh:path catalog:height ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
        [ sh:property [
            sh:path catalog:width ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
        [ sh:property [
            sh:path catalog:depth ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Product dimensions must include non-negative height, width, and depth." .

:ProductStatusShape
    a sh:NodeShape ;
    sh:targetClass catalog:ProductStatus ;
    sh:or (
        [ sh:property [
            sh:path catalog:availability ;
            sh:in ("InStock" "OutOfStock" "Backorder") ;
        ] ]
        [ sh:property [
            sh:path catalog:discontinued ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
    ) ;
    sh:message "Product must either be available or marked as discontinued." .

:WarehouseDetailShape
    a sh:NodeShape ;
    sh:targetClass catalog:WarehouseDetail ;
    sh:and (
        [ sh:property [
            sh:path catalog:locationCode ;
            sh:datatype xsd:string ;
            sh:minLength 2 ;
        ] ]
        [ sh:property [
            sh:path catalog:temperatureControlled ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Warehouse details must include a location code and whether it is temperature controlled." .

:ProductMetadataShape
    a sh:NodeShape ;
    sh:targetClass catalog:ProductMetadata ;
    sh:and (
        [ sh:property [
            sh:path catalog:createdAt ;
            sh:datatype xsd:dateTime ;
        ] ]
        [ sh:property [
            sh:path catalog:lastUpdated ;
            sh:datatype xsd:dateTime ;
        ] ]
    ) ;
    sh:message "Product metadata must include creation and last update timestamps." .

:ProductVariantShape
    a sh:NodeShape ;
    sh:targetClass catalog:ProductVariant ;
    sh:and (
        [ sh:property [
            sh:path catalog:variantType ;
            sh:in ("Color" "Size" "Material") ;
        ] ]
        [ sh:property [
            sh:path catalog:variantValue ;
            sh:datatype xsd:string ;
            sh:minLength 2 ;
        ] ]
    ) ;
    sh:message "Each product variant must specify type and value." .

:InventoryThresholdShape
    a sh:NodeShape ;
    sh:targetClass catalog:InventoryThreshold ;
    sh:and (
        [ sh:property [
            sh:path catalog:reorderLevel ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
        [ sh:property [
            sh:path catalog:maximumStock ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Inventory threshold must include reorder level and maximum stock values." .

:TaxationShape
    a sh:NodeShape ;
    sh:targetClass catalog:Taxation ;
    sh:and (
        [ sh:property [
            sh:path catalog:taxCategory ;
            sh:in ("Standard" "Reduced" "Exempt") ;
        ] ]
        [ sh:property [
            sh:path catalog:taxRate ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 100.0 ;
        ] ]
    ) ;
    sh:message "Taxation must include a valid category and a percentage tax rate." .

:SubscriptionPlanShape
    a sh:NodeShape ;
    sh:targetClass catalog:SubscriptionPlan ;
    sh:and (
        [ sh:property [
            sh:path catalog:billingCycle ;
            sh:in ("Monthly" "Quarterly" "Yearly") ;
        ] ]
        [ sh:property [
            sh:path catalog:planPrice ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Subscription plan must define billing cycle and price." .

:ProductLabelShape
    a sh:NodeShape ;
    sh:targetClass catalog:ProductLabel ;
    sh:and (
        [ sh:property [
            sh:path catalog:labelName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path catalog:isEcoFriendly ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Product label must include name and eco-friendly status." .

:SeasonalAvailabilityShape
    a sh:NodeShape ;
    sh:targetClass catalog:SeasonalAvailability ;
    sh:and (
        [ sh:property [
            sh:path catalog:startMonth ;
            sh:datatype xsd:gMonth ;
        ] ]
        [ sh:property [
            sh:path catalog:endMonth ;
            sh:datatype xsd:gMonth ;
        ] ]
    ) ;
    sh:message "Seasonal availability must define start and end months." .
:CustomerReviewShape
    a sh:NodeShape ;
    sh:targetClass catalog:CustomerReview ;
    sh:and (
        [ sh:property [
            sh:path catalog:rating ;
            sh:datatype xsd:float ;
            sh:minInclusive 1.0 ;
            sh:maxInclusive 5.0 ;
        ] ]
        [ sh:property [
            sh:path catalog:reviewText ;
            sh:datatype xsd:string ;
            sh:minLength 10 ;
        ] ]
    ) ;
    sh:message "Customer review must include a rating between 1 and 5 and a review message." .

:StockMovementShape
    a sh:NodeShape ;
    sh:targetClass catalog:StockMovement ;
    sh:and (
        [ sh:property [
            sh:path catalog:movementType ;
            sh:in ("Inbound" "Outbound") ;
        ] ]
        [ sh:property [
            sh:path catalog:quantity ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Stock movement must indicate type and quantity moved." .

:ReturnPolicyShape
    a sh:NodeShape ;
    sh:targetClass catalog:ReturnPolicy ;
    sh:and (
        [ sh:property [
            sh:path catalog:returnWindowDays ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
        [ sh:property [
            sh:path catalog:restockingFeePercent ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 100.0 ;
        ] ]
    ) ;
    sh:message "Return policy must specify return window and optional restocking fee." .

:BrandShape
    a sh:NodeShape ;
    sh:targetClass catalog:Brand ;
    sh:and (
        [ sh:property [
            sh:path catalog:brandName ;
            sh:datatype xsd:string ;
            sh:minLength 2 ;
        ] ]
        [ sh:property [
            sh:path catalog:brandOrigin ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Brand must include name and country of origin." .

:PriceRangeShape
    a sh:NodeShape ;
    sh:targetClass catalog:PriceRange ;
    sh:and (
        [ sh:property [
            sh:path catalog:minPrice ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
        [ sh:property [
            sh:path catalog:maxPrice ;
            sh:datatype xsd:float ;
        ] ]
        [ sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "Maximum price must be greater than or equal to minimum price." ;
            sh:prefixes [
                sh:declare [
                    sh:prefix "catalog" ;
                    sh:namespace "http://example.org/catalog#"^^xsd:anyURI ;
                ]
            ] ;
            sh:select """
                SELECT $this
                WHERE {
                    $this catalog:minPrice ?min .
                    $this catalog:maxPrice ?max .
                    FILTER (?max < ?min)
                }
            """ ;
        ] ]
    ) ;
    sh:message "Price range must include valid minimum and maximum prices." .

:SalesChannelShape
    a sh:NodeShape ;
    sh:targetClass catalog:SalesChannel ;
    sh:and (
        [ sh:property [
            sh:path catalog:channelType ;
            sh:in ("Online" "Retail" "Wholesale") ;
        ] ]
        [ sh:property [
            sh:path catalog:isActive ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Sales channel must specify the type and its active status." .

:BulkDiscountShape
    a sh:NodeShape ;
    sh:targetClass catalog:BulkDiscount ;
    sh:and (
        [ sh:property [
            sh:path catalog:minQuantity ;
            sh:datatype xsd:integer ;
            sh:minInclusive 2 ;
        ] ]
        [ sh:property [
            sh:path catalog:discountRate ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
            sh:maxInclusive 100.0 ;
        ] ]
    ) ;
    sh:message "Bulk discount must include minimum quantity and discount rate." .

:WarehouseShape
    a sh:NodeShape ;
    sh:targetClass catalog:Warehouse ;
    sh:and (
        [ sh:property [
            sh:path catalog:warehouseName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path catalog:locationCode ;
            sh:datatype xsd:string ;
            sh:pattern "^[A-Z]{2}-\\d{3}$" ;
        ] ]
    ) ;
    sh:message "Warehouse must have a name and a valid location code (e.g., DE-123)." .

:BarcodeSpecShape
    a sh:NodeShape ;
    sh:targetClass catalog:BarcodeSpec ;
    sh:and (
        [ sh:property [
            sh:path catalog:barcodeValue ;
            sh:datatype xsd:string ;
            sh:pattern "^\\d{12,13}$" ;
        ] ]
        [ sh:property [
            sh:path catalog:barcodeType ;
            sh:in ("EAN-13" "UPC-A") ;
        ] ]
    ) ;
    sh:message "Barcode must follow a valid pattern and specify its type." .

:ProductComparisonShape
    a sh:NodeShape ;
    sh:targetClass catalog:ProductComparison ;
    sh:and (
        [ sh:property [
            sh:path catalog:comparedProduct1 ;
            sh:nodeKind sh:IRI ;
        ] ]
        [ sh:property [
            sh:path catalog:comparedProduct2 ;
            sh:nodeKind sh:IRI ;
        ] ]
        [ sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "Compared products must not be the same." ;
            sh:prefixes [
                sh:declare [
                    sh:prefix "catalog" ;
                    sh:namespace "http://example.org/catalog#"^^xsd:anyURI ;
                ]
            ] ;
            sh:select """
                SELECT $this
                WHERE {
                    $this catalog:comparedProduct1 ?p1 ;
                          catalog:comparedProduct2 ?p2 .
                    FILTER (?p1 = ?p2)
                }
            """ ;
        ] ]
    ) ;
    sh:message "Comparison must involve two distinct products." .

##Food Delivery Domain
:RestaurantProfileShape
    a sh:NodeShape ;
    sh:targetClass food:RestaurantProfile ;
    sh:and (
        [ sh:property [
            sh:path food:restaurantName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path food:location ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
    ) ;
    sh:message "Restaurant profile must include name and location." .

:MenuItemShape
    a sh:NodeShape ;
    sh:targetClass food:MenuItem ;
    sh:and (
        [ sh:property [
            sh:path food:itemName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path food:price ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Menu item must include a name and a non-negative price." .

:DeliveryStatusShape
    a sh:NodeShape ;
    sh:targetClass food:DeliveryStatus ;
    sh:and (
        [ sh:property [
            sh:path food:status ;
            sh:in ("Pending" "Out for Delivery" "Delivered" "Cancelled") ;
        ] ]
        [ sh:property [
            sh:path food:updatedAt ;
            sh:datatype xsd:dateTime ;
        ] ]
    ) ;
    sh:message "Delivery status must include a valid status and update time." .

:FoodAllergyInfoShape
    a sh:NodeShape ;
    sh:targetClass food:AllergyInfo ;
    sh:and (
        [ sh:property [
            sh:path food:containsAllergens ;
            sh:in ("Peanuts" "Dairy" "Gluten" "Soy" "Shellfish") ;
        ] ]
        [ sh:property [
            sh:path food:advisoryNote ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
    ) ;
    sh:message "Allergy info must specify allergens and provide an advisory note." .

:CustomerOrderShape
    a sh:NodeShape ;
    sh:targetClass food:CustomerOrder ;
    sh:and (
        [ sh:property [
            sh:path food:orderID ;
            sh:datatype xsd:string ;
            sh:pattern "^ORD-\\d{5}$" ;
        ] ]
        [ sh:property [
            sh:path food:orderTotal ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Customer order must include a valid ID and total amount." .

:DeliveryDriverShape
    a sh:NodeShape ;
    sh:targetClass food:DeliveryDriver ;
    sh:and (
        [ sh:property [
            sh:path food:driverID ;
            sh:datatype xsd:string ;
            sh:minLength 4 ;
        ] ]
        [ sh:property [
            sh:path food:vehicleType ;
            sh:in ("Bicycle" "Scooter" "Car") ;
        ] ]
    ) ;
    sh:message "Delivery driver must have an ID and a valid vehicle type." .

:KitchenTicketShape
    a sh:NodeShape ;
    sh:targetClass food:KitchenTicket ;
    sh:and (
        [ sh:property [
            sh:path food:ticketNumber ;
            sh:datatype xsd:string ;
            sh:pattern "^KT\\d{4}$" ;
        ] ]
        [ sh:property [
            sh:path food:isPrepared ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Kitchen ticket must include a valid ticket number and preparation status." .

:MealRatingShape
    a sh:NodeShape ;
    sh:targetClass food:MealRating ;
    sh:and (
        [ sh:property [
            sh:path food:ratingValue ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
            sh:maxInclusive 5 ;
        ] ]
        [ sh:property [
            sh:path food:reviewComment ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
    ) ;
    sh:message "Meal rating must include a value between 1–5 and a comment." .

:PromotionalOfferShape
    a sh:NodeShape ;
    sh:targetClass food:PromotionalOffer ;
    sh:and (
        [ sh:property [
            sh:path food:offerCode ;
            sh:datatype xsd:string ;
            sh:pattern "^SAVE\\d{2}$" ;
        ] ]
        [ sh:property [
            sh:path food:discountPercentage ;
            sh:datatype xsd:float ;
            sh:minInclusive 1.0 ;
            sh:maxInclusive 100.0 ;
        ] ]
    ) ;
    sh:message "Offer must include a valid code and discount percentage." .

:OrderCancellationShape
    a sh:NodeShape ;
    sh:targetClass food:OrderCancellation ;
    sh:and (
        [ sh:property [
            sh:path food:cancellationReason ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path food:refunded ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Order cancellation must include a reason and refund status." .
:RestaurantContactShape
    a sh:NodeShape ;
    sh:targetClass food:RestaurantContact ;
    sh:property [
        sh:path food:phoneNumber ;
        sh:datatype xsd:string ;
        sh:pattern "^\\+\\d{10,15}$" ;
    ] ;
    sh:message "Restaurant contact must include a valid international phone number." .

:DishCategoryShape
    a sh:NodeShape ;
    sh:targetClass food:DishCategory ;
    sh:property [
        sh:path food:categoryName ;
        sh:datatype xsd:string ;
        sh:minLength 3 ;
    ] ;
    sh:message "Dish category must have a name of at least 3 characters." .

:OrderPaymentShape
    a sh:NodeShape ;
    sh:targetClass food:OrderPayment ;
    sh:property [
        sh:path food:paymentMethod ;
        sh:in ("Card" "Cash" "Online Wallet") ;
    ] ;
    sh:message "Order payment must specify the method used." .

:PackagingTypeShape
    a sh:NodeShape ;
    sh:targetClass food:PackagingType ;
    sh:property [
        sh:path food:materialType ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Packaging type must include a material type." .

:CustomerFeedbackShape
    a sh:NodeShape ;
    sh:targetClass food:CustomerFeedback ;
    sh:property [
        sh:path food:feedbackText ;
        sh:datatype xsd:string ;
        sh:minLength 10 ;
    ] ;
    sh:message "Customer feedback must be at least 10 characters long." .

:DeliveryZoneShape
    a sh:NodeShape ;
    sh:targetClass food:DeliveryZone ;
    sh:property [
        sh:path food:zoneName ;
        sh:datatype xsd:string ;
        sh:minLength 3 ;
    ] ;
    sh:message "Delivery zone must have a valid name." .

:OrderTimeWindowShape
    a sh:NodeShape ;
    sh:targetClass food:OrderTimeWindow ;
    sh:property [
        sh:path food:deliveryWindow ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Order must include a delivery time window." .

:MenuAvailabilityShape
    a sh:NodeShape ;
    sh:targetClass food:MenuAvailability ;
    sh:property [
        sh:path food:isAvailable ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:message "Menu item must indicate availability." .

:CustomerAccountShape
    a sh:NodeShape ;
    sh:targetClass food:CustomerAccount ;
    sh:property [
        sh:path food:email ;
        sh:datatype xsd:string ;
        sh:pattern "^.+@.+\\..+$" ;
    ] ;
    sh:message "Customer account must include a valid email address." .

:DeliveryTipShape
    a sh:NodeShape ;
    sh:targetClass food:DeliveryTip ;
    sh:property [
        sh:path food:tipAmount ;
        sh:datatype xsd:float ;
        sh:minInclusive 0.0 ;
    ] ;
    sh:message "Delivery tip must be a non-negative amount." .

:OrderTrackingShape
    a sh:NodeShape ;
    sh:targetClass food:OrderTracking ;
    sh:and (
        [ sh:property [
            sh:path food:trackingNumber ;
            sh:datatype xsd:string ;
            sh:pattern "^FD\\d{5}$" ;
        ] ]
        [ sh:property [
            sh:path food:status ;
            sh:in ("Pending" "Dispatched" "Delivered" "Cancelled") ;
        ] ]
    ) ;
    sh:message "Tracking must include a valid number and one of the allowed statuses." .

:MealIngredientShape
    a sh:NodeShape ;
    sh:targetClass food:MealIngredient ;
    sh:and (
        [ sh:property [
            sh:path food:ingredientName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path food:isAllergen ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Each meal ingredient must have a name and allergen status." .

:SubscriptionPlanShape
    a sh:NodeShape ;
    sh:targetClass food:SubscriptionPlan ;
    sh:and (
        [ sh:property [
            sh:path food:planType ;
            sh:in ("Weekly" "Monthly" "Yearly") ;
        ] ]
        [ sh:property [
            sh:path food:price ;
            sh:datatype xsd:float ;
            sh:minInclusive 5.0 ;
        ] ]
    ) ;
    sh:message "Subscription plan must specify type and minimum price of 5." .

:FoodAllergyProfileShape
    a sh:NodeShape ;
    sh:targetClass food:FoodAllergyProfile ;
    sh:property [
        sh:path food:restrictedItems ;
        sh:datatype xsd:string ;
        sh:minLength 3 ;
    ] ;
    sh:message "Allergy profile must mention restricted food items." .

:PaymentStatusShape
    a sh:NodeShape ;
    sh:targetClass food:PaymentStatus ;
    sh:or (
        [ sh:property [
            sh:path food:paid ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
        [ sh:property [
            sh:path food:paymentDate ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Payment must either be marked as paid or include a payment date." .

:LoyaltyProgramShape
    a sh:NodeShape ;
    sh:targetClass food:LoyaltyProgram ;
    sh:and (
        [ sh:property [
            sh:path food:pointsEarned ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
        [ sh:property [
            sh:path food:membershipLevel ;
            sh:in ("Bronze" "Silver" "Gold" "Platinum") ;
        ] ]
    ) ;
    sh:message "Loyalty program must have points and a valid membership level." .

:RiderAssignmentShape
    a sh:NodeShape ;
    sh:targetClass food:RiderAssignment ;
    sh:and (
        [ sh:property [
            sh:path food:riderID ;
            sh:datatype xsd:string ;
            sh:minLength 4 ;
        ] ]
        [ sh:property [
            sh:path food:assignedOrders ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
    ) ;
    sh:message "Rider assignment must include ID and number of orders." .

:PromoCodeShape
    a sh:NodeShape ;
    sh:targetClass food:PromoCode ;
    sh:and (
        [ sh:property [
            sh:path food:code ;
            sh:datatype xsd:string ;
            sh:pattern "^[A-Z0-9]{6,10}$" ;
        ] ]
        [ sh:property [
            sh:path food:discountValue ;
            sh:datatype xsd:float ;
            sh:minInclusive 1.0 ;
            sh:maxInclusive 50.0 ;
        ] ]
    ) ;
    sh:message "Promo code must match format and give a discount between 1% and 50%." .

:VendorRatingShape
    a sh:NodeShape ;
    sh:targetClass food:VendorRating ;
    sh:and (
        [ sh:property [
            sh:path food:ratingScore ;
            sh:datatype xsd:float ;
            sh:minInclusive 1.0 ;
            sh:maxInclusive 5.0 ;
        ] ]
        [ sh:property [
            sh:path food:reviewCount ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
    ) ;
    sh:message "Vendor rating must include score (1–5) and number of reviews." .

:ComboMealShape
    a sh:NodeShape ;
    sh:targetClass food:ComboMeal ;
    sh:and (
        [ sh:property [
            sh:path food:mealItems ;
            sh:minCount 2 ;
        ] ]
        [ sh:property [
            sh:path food:comboPrice ;
            sh:datatype xsd:float ;
            sh:minInclusive 1.0 ;
        ] ]
    ) ;
    sh:message "Combo meal must include at least two items and a valid price." .

#new 

:CitizenIdentityShape
    a sh:NodeShape ;
    sh:targetClass civic:CitizenIdentity ;
    sh:and (
        [ sh:property [
            sh:path civic:passportNumber ;
            sh:datatype xsd:string ;
            sh:pattern "^[A-Z]{2}\\d{7}$" ;
        ] ]
        [ sh:property [
            sh:path civic:nationalID ;
            sh:datatype xsd:string ;
            sh:minLength 10 ;
        ] ]
        [ sh:property [
            sh:path civic:residentialAddress ;
            sh:datatype xsd:string ;
            sh:minLength 10 ;
        ] ]
    ) ;
    sh:message "Citizen identity must include a valid passport number, national ID, and address." .

:MunicipalGarbageServiceShape
    a sh:NodeShape ;
    sh:targetClass civic:GarbageService ;
    sh:and (
        [ sh:property [
            sh:path civic:collectionDay ;
            sh:in ("Monday" "Tuesday" "Wednesday" "Thursday" "Friday") ;
        ] ]
        [ sh:property [
            sh:path civic:binType ;
            sh:in ("Organic" "Plastic" "Paper" "Mixed") ;
        ] ]
    ) ;
    sh:message "Garbage service must specify collection day and bin type." .

:WaterSupplyRecordShape
    a sh:NodeShape ;
    sh:targetClass civic:WaterSupply ;
    sh:and (
        [ sh:property [
            sh:path civic:householdID ;
            sh:datatype xsd:string ;
            sh:minLength 6 ;
        ] ]
        [ sh:property [
            sh:path civic:waterUsage ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Water supply record must include household ID and usage in liters." .

:LegislationRecordShape
    a sh:NodeShape ;
    sh:targetClass civic:LegalDocument ;
    sh:and (
        [ sh:property [
            sh:path civic:lawCode ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:amendmentDate ;
            sh:datatype xsd:date ;
        ] ]
        [ sh:property [
            sh:path civic:referenceURL ;
            sh:datatype xsd:anyURI ;
        ] ]
    ) ;
    sh:message "Legal record must include code, amendment date, and reference URL." .

:PatientHealthcareRecordShape
    a sh:NodeShape ;
    sh:targetClass civic:PatientRecord ;
    sh:and (
        [ sh:property [
            sh:path civic:patientID ;
            sh:datatype xsd:string ;
            sh:pattern "^PID-\\d{6}$" ;
        ] ]
        [ sh:property [
            sh:path civic:diagnosis ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path civic:treatmentPlan ;
            sh:datatype xsd:string ;
            sh:minLength 10 ;
        ] ]
    ) ;
    sh:message "Patient record must include ID, diagnosis, and treatment plan." .

:ImmigrationStatusShape
    a sh:NodeShape ;
    sh:targetClass civic:ImmigrationStatus ;
    sh:and (
        [ sh:property [
            sh:path civic:visaType ;
            sh:in ("Tourist" "Student" "Work" "PermanentResident") ;
        ] ]
        [ sh:property [
            sh:path civic:validUntil ;
            sh:datatype xsd:date ;
        ] ]
        [ sh:property [
            sh:path civic:permitNumber ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
    ) ;
    sh:message "Immigration status must specify visa type, expiry date, and permit number." .

:PublicTransportRouteShape
    a sh:NodeShape ;
    sh:targetClass civic:TransportRoute ;
    sh:and (
        [ sh:property [
            sh:path civic:routeID ;
            sh:datatype xsd:string ;
            sh:pattern "^R\\d{3}$" ;
        ] ]
        [ sh:property [
            sh:path civic:startStation ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path civic:endStation ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
    ) ;
    sh:message "Transport route must have route ID and valid start and end stations." .

:TransportTimetableShape
    a sh:NodeShape ;
    sh:targetClass civic:TransportSchedule ;
    sh:and (
        [ sh:property [
            sh:path civic:departureTime ;
            sh:datatype xsd:time ;
        ] ]
        [ sh:property [
            sh:path civic:arrivalTime ;
            sh:datatype xsd:time ;
        ] ]
    ) ;
    sh:message "Transport timetable must include departure and arrival times." .

:VoterEligibilityShape
    a sh:NodeShape ;
    sh:targetClass civic:VoterRecord ;
    sh:and (
        [ sh:property [
            sh:path civic:citizenID ;
            sh:datatype xsd:string ;
            sh:minLength 6 ;
        ] ]
        [ sh:property [
            sh:path civic:isEligible ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Voter record must specify citizen ID and eligibility status." .

:ElectionResultShape
    a sh:NodeShape ;
    sh:targetClass civic:ElectionResult ;
    sh:and (
        [ sh:property [
            sh:path civic:ballotID ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:voteCount ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
    ) ;
    sh:message "Election result must include ballot ID and number of votes." .
:DisasterReliefAidShape
    a sh:NodeShape ;
    sh:targetClass civic:DisasterReliefAid ;
    sh:and (
        [ sh:property [
            sh:path civic:aidType ;
            sh:in ("Medical" "Food" "Shelter" "Cash") ;
        ] ]
        [ sh:property [
            sh:path civic:eligible ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Disaster relief must specify aid type and eligibility status." .

:EmergencyShelterShape
    a sh:NodeShape ;
    sh:targetClass civic:EmergencyShelter ;
    sh:and (
        [ sh:property [
            sh:path civic:location ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:capacity ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
    ) ;
    sh:message "Shelter must specify its location and maximum capacity." .

:TaxpayerRecordShape
    a sh:NodeShape ;
    sh:targetClass civic:TaxpayerRecord ;
    sh:and (
        [ sh:property [
            sh:path civic:taxpayerID ;
            sh:datatype xsd:string ;
            sh:pattern "^TAX\\d{6}$" ;
        ] ]
        [ sh:property [
            sh:path civic:declaredIncome ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Taxpayer record must include a valid ID and declared income." .

:IncomeDeductionShape
    a sh:NodeShape ;
    sh:targetClass civic:IncomeDeduction ;
    sh:and (
        [ sh:property [
            sh:path civic:deductionType ;
            sh:in ("Healthcare" "Education" "Charity" "Retirement") ;
        ] ]
        [ sh:property [
            sh:path civic:deductionAmount ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Deduction must specify a type and a non-negative amount." .

:SocialWelfareBenefitShape
    a sh:NodeShape ;
    sh:targetClass civic:WelfareBenefit ;
    sh:and (
        [ sh:property [
            sh:path civic:benefitType ;
            sh:in ("Unemployment" "Disability" "Housing" "ChildSupport") ;
        ] ]
        [ sh:property [
            sh:path civic:monthlyAmount ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Welfare benefit must define the benefit type and monthly amount." .

:WelfareEligibilityShape
    a sh:NodeShape ;
    sh:targetClass civic:WelfareEligibility ;
    sh:and (
        [ sh:property [
            sh:path civic:applicantID ;
            sh:datatype xsd:string ;
            sh:minLength 6 ;
        ] ]
        [ sh:property [
            sh:path civic:incomeLevel ;
            sh:datatype xsd:float ;
        ] ]
        [ sh:property [
            sh:path civic:isEligible ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Eligibility must include applicant ID, income level, and eligibility status." .

:VisaApplicationShape
    a sh:NodeShape ;
    sh:targetClass civic:VisaApplication ;
    sh:and (
        [ sh:property [
            sh:path civic:applicationID ;
            sh:datatype xsd:string ;
            sh:pattern "^VISA-\\d{5}$" ;
        ] ]
        [ sh:property [
            sh:path civic:applicationStatus ;
            sh:in ("Pending" "Approved" "Rejected") ;
        ] ]
    ) ;
    sh:message "Visa application must have ID and application status." .

:TransportStationShape
    a sh:NodeShape ;
    sh:targetClass civic:TransportStation ;
    sh:and (
        [ sh:property [
            sh:path civic:stationName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path civic:isAccessible ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Transport station must include name and accessibility information." .

:BallotRecordShape
    a sh:NodeShape ;
    sh:targetClass civic:BallotRecord ;
    sh:and (
        [ sh:property [
            sh:path civic:ballotType ;
            sh:in ("Presidential" "Local" "Referendum") ;
        ] ]
        [ sh:property [
            sh:path civic:submissionDate ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Ballot record must include ballot type and submission date." .

:TaxFilingStatusShape
    a sh:NodeShape ;
    sh:targetClass civic:TaxFilingStatus ;
    sh:and (
        [ sh:property [
            sh:path civic:filingYear ;
            sh:datatype xsd:gYear ;
        ] ]
        [ sh:property [
            sh:path civic:status ;
            sh:in ("Filed" "Pending" "Overdue") ;
        ] ]
    ) ;
    sh:message "Tax filing status must include the year and filing status." .
:CitizenContactShape
    a sh:NodeShape ;
    sh:targetClass civic:CitizenContact ;
    sh:and (
        [ sh:property [
            sh:path civic:email ;
            sh:datatype xsd:string ;
            sh:pattern "^.+@.+\\..+$" ;
        ] ]
        [ sh:property [
            sh:path civic:phone ;
            sh:datatype xsd:string ;
            sh:pattern "^\\+\\d{10,15}$" ;
        ] ]
    ) ;
    sh:message "Citizen contact must include a valid email and phone number." .

:LegalReferenceShape
    a sh:NodeShape ;
    sh:targetClass civic:LegalReference ;
    sh:and (
        [ sh:property [
            sh:path civic:referenceText ;
            sh:datatype xsd:string ;
            sh:minLength 10 ;
        ] ]
        [ sh:property [
            sh:path civic:lawArticle ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Legal reference must include reference text and law article." .

:MedicalFacilityShape
    a sh:NodeShape ;
    sh:targetClass civic:MedicalFacility ;
    sh:and (
        [ sh:property [
            sh:path civic:facilityName ;
            sh:datatype xsd:string ;
            sh:minLength 3 ;
        ] ]
        [ sh:property [
            sh:path civic:facilityType ;
            sh:in ("Hospital" "Clinic" "UrgentCare") ;
        ] ]
    ) ;
    sh:message "Medical facility must specify name and type." .

:ImmigrationOfficeShape
    a sh:NodeShape ;
    sh:targetClass civic:ImmigrationOffice ;
    sh:and (
        [ sh:property [
            sh:path civic:officeCode ;
            sh:datatype xsd:string ;
            sh:pattern "^IM-\\d{3}$" ;
        ] ]
        [ sh:property [
            sh:path civic:region ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Immigration office must include a code and region." .

:TransportPassShape
    a sh:NodeShape ;
    sh:targetClass civic:TransportPass ;
    sh:and (
        [ sh:property [
            sh:path civic:passType ;
            sh:in ("Monthly" "Annual" "Student") ;
        ] ]
        [ sh:property [
            sh:path civic:validThrough ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Transport pass must specify type and validity date." .

:VoteCastingShape
    a sh:NodeShape ;
    sh:targetClass civic:VoteCasting ;
    sh:and (
        [ sh:property [
            sh:path civic:voterID ;
            sh:datatype xsd:string ;
            sh:minLength 6 ;
        ] ]
        [ sh:property [
            sh:path civic:ballotID ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Vote casting must include both voter ID and ballot ID." .

:ReliefFundDisbursementShape
    a sh:NodeShape ;
    sh:targetClass civic:ReliefFund ;
    sh:and (
        [ sh:property [
            sh:path civic:recipientID ;
            sh:datatype xsd:string ;
            sh:minLength 6 ;
        ] ]
        [ sh:property [
            sh:path civic:disbursedAmount ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Relief fund must specify recipient ID and disbursed amount." .

:TaxAuditRecordShape
    a sh:NodeShape ;
    sh:targetClass civic:TaxAudit ;
    sh:and (
        [ sh:property [
            sh:path civic:auditYear ;
            sh:datatype xsd:gYear ;
        ] ]
        [ sh:property [
            sh:path civic:auditStatus ;
            sh:in ("Clean" "Pending Review" "Flagged") ;
        ] ]
    ) ;
    sh:message "Tax audit record must include audit year and status." .

:SocialProgramRegistrationShape
    a sh:NodeShape ;
    sh:targetClass civic:SocialProgram ;
    sh:and (
        [ sh:property [
            sh:path civic:programName ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:registrationDate ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Social program must include name and registration date." .

:ResidencyPermitShape
    a sh:NodeShape ;
    sh:targetClass civic:ResidencyPermit ;
    sh:and (
        [ sh:property [
            sh:path civic:permitID ;
            sh:datatype xsd:string ;
            sh:pattern "^RP-\\d{5}$" ;
        ] ]
        [ sh:property [
            sh:path civic:issuedDate ;
            sh:datatype xsd:date ;
        ] ]
        [ sh:property [
            sh:path civic:expiryDate ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Residency permit must include ID, issued date, and expiry date." .
:PublicComplaintShape
    a sh:NodeShape ;
    sh:targetClass civic:PublicComplaint ;
    sh:and (
        [ sh:property [
            sh:path civic:complaintID ;
            sh:datatype xsd:string ;
            sh:pattern "^CMP-\\d{5}$" ;
        ] ]
        [ sh:property [
            sh:path civic:issueDescription ;
            sh:datatype xsd:string ;
            sh:minLength 15 ;
        ] ]
    ) ;
    sh:message "Complaint must include a valid ID and a detailed issue description." .

:CommunityCenterShape
    a sh:NodeShape ;
    sh:targetClass civic:CommunityCenter ;
    sh:and (
        [ sh:property [
            sh:path civic:centerName ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:isPublic ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Community center must specify a name and whether it is public." .

:PermitApplicationShape
    a sh:NodeShape ;
    sh:targetClass civic:PermitApplication ;
    sh:and (
        [ sh:property [
            sh:path civic:applicantID ;
            sh:datatype xsd:string ;
            sh:minLength 6 ;
        ] ]
        [ sh:property [
            sh:path civic:permitType ;
            sh:in ("Construction" "Business" "Event" "Environmental") ;
        ] ]
    ) ;
    sh:message "Permit application must include applicant ID and permit type." .

:VehicleRegistrationShape
    a sh:NodeShape ;
    sh:targetClass civic:VehicleRegistration ;
    sh:and (
        [ sh:property [
            sh:path civic:licensePlate ;
            sh:datatype xsd:string ;
            sh:pattern "^[A-Z]{1,2}-\\d{4}$" ;
        ] ]
        [ sh:property [
            sh:path civic:ownerID ;
            sh:datatype xsd:string ;
            sh:minLength 6 ;
        ] ]
    ) ;
    sh:message "Vehicle registration must have a license plate and an owner ID." .

:NeighborhoodCouncilShape
    a sh:NodeShape ;
    sh:targetClass civic:NeighborhoodCouncil ;
    sh:and (
        [ sh:property [
            sh:path civic:councilName ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path civic:district ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Neighborhood council must include its name and district." .

:EnvironmentalReportShape
    a sh:NodeShape ;
    sh:targetClass civic:EnvironmentalReport ;
    sh:and (
        [ sh:property [
            sh:path civic:reportID ;
            sh:datatype xsd:string ;
            sh:pattern "^ENV\\d{4}$" ;
        ] ]
        [ sh:property [
            sh:path civic:airQualityIndex ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
    ) ;
    sh:message "Environmental report must include ID and air quality index." .

:UtilityBillShape
    a sh:NodeShape ;
    sh:targetClass civic:UtilityBill ;
    sh:and (
        [ sh:property [
            sh:path civic:billingMonth ;
            sh:datatype xsd:gMonth ;
        ] ]
        [ sh:property [
            sh:path civic:totalAmount ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Utility bill must include billing month and total amount." .

:HousingProjectShape
    a sh:NodeShape ;
    sh:targetClass civic:HousingProject ;
    sh:and (
        [ sh:property [
            sh:path civic:projectName ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:unitsAvailable ;
            sh:datatype xsd:integer ;
            sh:minInclusive 0 ;
        ] ]
    ) ;
    sh:message "Housing project must define project name and available units." .

:ChildWelfareCaseShape
    a sh:NodeShape ;
    sh:targetClass civic:ChildWelfareCase ;
    sh:and (
        [ sh:property [
            sh:path civic:caseID ;
            sh:datatype xsd:string ;
            sh:pattern "^CW-\\d{4}$" ;
        ] ]
        [ sh:property [
            sh:path civic:isActive ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Child welfare case must have a valid ID and active status." .

:RoadMaintenanceRecordShape
    a sh:NodeShape ;
    sh:targetClass civic:RoadMaintenance ;
    sh:and (
        [ sh:property [
            sh:path civic:roadID ;
            sh:datatype xsd:string ;
            sh:minLength 4 ;
        ] ]
        [ sh:property [
            sh:path civic:lastRepairDate ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Road maintenance must include road ID and date of last repair." .
:BuildingPermitShape
    a sh:NodeShape ;
    sh:targetClass civic:BuildingPermit ;
    sh:and (
        [ sh:property [
            sh:path civic:permitID ;
            sh:datatype xsd:string ;
            sh:pattern "^BP-\\d{5}$" ;
        ] ]
        [ sh:property [
            sh:path civic:approvalStatus ;
            sh:in ("Approved" "Rejected" "Pending") ;
        ] ]
        [ sh:property [
            sh:path civic:expiryDate ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Building permit must have an ID, status, and expiry date." .

:CensusRecordShape
    a sh:NodeShape ;
    sh:targetClass civic:CensusRecord ;
    sh:and (
        [ sh:property [
            sh:path civic:householdSize ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
        [ sh:property [
            sh:path civic:isUrban ;
            sh:datatype xsd:boolean ;
        ] ]
        [ sh:property [
            sh:path civic:regionCode ;
            sh:datatype xsd:string ;
            sh:pattern "^REG-\\d{3}$" ;
        ] ]
    ) ;
    sh:message "Census record must include household size, urban status, and region code." .

:LegalAidApplicationShape
    a sh:NodeShape ;
    sh:targetClass civic:LegalAidApplication ;
    sh:and (
        [ sh:property [
            sh:path civic:applicantIncome ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
        [ sh:property [
            sh:path civic:caseSeverity ;
            sh:in ("Low" "Moderate" "High") ;
        ] ]
    ) ;
    sh:message "Legal aid application must state applicant income and case severity." .

:PublicEventPermitShape
    a sh:NodeShape ;
    sh:targetClass civic:EventPermit ;
    sh:and (
        [ sh:property [
            sh:path civic:eventDate ;
            sh:datatype xsd:date ;
        ] ]
        [ sh:property [
            sh:path civic:expectedCrowd ;
            sh:datatype xsd:integer ;
            sh:minInclusive 1 ;
        ] ]
        [ sh:property [
            sh:path civic:eventType ;
            sh:in ("Protest" "Parade" "Festival" "Concert") ;
        ] ]
    ) ;
    sh:message "Event permit must include date, expected crowd, and event type." .

:ResidenceVerificationShape
    a sh:NodeShape ;
    sh:targetClass civic:ResidenceVerification ;
    sh:or (
        [ sh:property [
            sh:path civic:utilityBillAttached ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
        [ sh:property [
            sh:path civic:leaseAgreementAttached ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
    ) ;
    sh:message "Verification must include a utility bill or lease agreement." .

:EducationGrantShape
    a sh:NodeShape ;
    sh:targetClass civic:EducationGrant ;
    sh:and (
        [ sh:property [
            sh:path civic:grantAmount ;
            sh:datatype xsd:float ;
            sh:minInclusive 100.0 ;
        ] ]
        [ sh:property [
            sh:path civic:fieldOfStudy ;
            sh:in ("STEM" "Arts" "Law" "Medicine" "Education") ;
        ] ]
    ) ;
    sh:message "Education grant must define amount (min €100) and field of study." .

:TaxResidencyStatusShape
    a sh:NodeShape ;
    sh:targetClass civic:TaxResidencyStatus ;
    sh:and (
        [ sh:property [
            sh:path civic:daysPresent ;
            sh:datatype xsd:integer ;
        ] ]
        [ sh:property [
            sh:path civic:isResident ;
            sh:datatype xsd:boolean ;
        ] ]
        [ sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "A person is resident if present more than 183 days." ;
            sh:select """
                SELECT $this
                WHERE {
                    $this civic:daysPresent ?d .
                    $this civic:isResident ?r .
                    FILTER ((?d > 183 && !?r) || (?d <= 183 && ?r))
                }
            """ ;
        ] ]
    ) ;
    sh:message "Residency status must match days present in the country." .

:DisabilityBenefitShape
    a sh:NodeShape ;
    sh:targetClass civic:DisabilityBenefit ;
    sh:and (
        [ sh:property [
            sh:path civic:disabilityGrade ;
            sh:datatype xsd:integer ;
            sh:minInclusive 10 ;
            sh:maxInclusive 100 ;
        ] ]
        [ sh:property [
            sh:path civic:monthlySupport ;
            sh:datatype xsd:float ;
            sh:minInclusive 0.0 ;
        ] ]
    ) ;
    sh:message "Disability benefit must include grade (10–100) and monthly support." .

:GreenZoneRegulationShape
    a sh:NodeShape ;
    sh:targetClass civic:GreenZoneVehicleAccess ;
    sh:and (
        [ sh:property [
            sh:path civic:emissionClass ;
            sh:in ("Euro 4" "Euro 5" "Euro 6") ;
        ] ]
        [ sh:property [
            sh:path civic:vehicleType ;
            sh:in ("Car" "Truck" "Bus") ;
        ] ]
    ) ;
    sh:message "Green zone access requires emission and vehicle type declaration." .

:PublicInternetAccessPointShape
    a sh:NodeShape ;
    sh:targetClass civic:PublicWiFi ;
    sh:and (
        [ sh:property [
            sh:path civic:locationID ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:bandwidthMbps ;
            sh:datatype xsd:float ;
            sh:minInclusive 10.0 ;
        ] ]
    ) ;
    sh:message "Public WiFi record must include location ID and bandwidth (≥10 Mbps)." .
:CitizenAppealShape
    a sh:NodeShape ;
    sh:targetClass civic:CitizenAppeal ;
    sh:and (
        [ sh:property [
            sh:path civic:appealID ;
            sh:datatype xsd:string ;
            sh:pattern "^APL-\\d{6}$" ;
        ] ]
        [ sh:property [
            sh:path civic:appealStatus ;
            sh:in ("Submitted" "InReview" "Resolved" "Rejected") ;
        ] ]
    ) ;
    sh:message "Citizen appeal must have a valid ID and a recognized status." .

:PublicInfrastructureInspectionShape
    a sh:NodeShape ;
    sh:targetClass civic:InfrastructureInspection ;
    sh:and (
        [ sh:property [
            sh:path civic:inspectedItem ;
            sh:in ("Bridge" "Tunnel" "Streetlight" "Pipeline") ;
        ] ]
        [ sh:property [
            sh:path civic:lastInspectionDate ;
            sh:datatype xsd:date ;
        ] ]
        [ sh:property [
            sh:path civic:passedInspection ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Infrastructure record must include item, date, and inspection status." .

:DigitalIdentityVerificationShape
    a sh:NodeShape ;
    sh:targetClass civic:DigitalIdentity ;
    sh:and (
        [ sh:property [
            sh:path civic:linkedEmail ;
            sh:datatype xsd:string ;
            sh:pattern "^.+@.+\\..+$" ;
        ] ]
        [ sh:property [
            sh:path civic:twoFactorEnabled ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Digital identity must include a valid email and 2FA setting." .

:ForeignAidProjectShape
    a sh:NodeShape ;
    sh:targetClass civic:ForeignAidProject ;
    sh:and (
        [ sh:property [
            sh:path civic:recipientCountry ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path civic:fundedAmount ;
            sh:datatype xsd:float ;
            sh:minInclusive 10000.0 ;
        ] ]
    ) ;
    sh:message "Foreign aid must specify a recipient country and a funded amount (≥ €10,000)." .

:YouthProgramEnrollmentShape
    a sh:NodeShape ;
    sh:targetClass civic:YouthProgram ;
    sh:and (
        [ sh:property [
            sh:path civic:participantAge ;
            sh:datatype xsd:integer ;
            sh:minInclusive 12 ;
            sh:maxInclusive 25 ;
        ] ]
        [ sh:property [
            sh:path civic:programType ;
            sh:in ("Education" "Sports" "Internship" "Mentorship") ;
        ] ]
    ) ;
    sh:message "Youth program must include participant age (12–25) and program type." .

:NationalIDValidationShape
    a sh:NodeShape ;
    sh:targetClass civic:NationalID ;
    sh:and (
        [ sh:property [
            sh:path civic:idNumber ;
            sh:datatype xsd:string ;
            sh:pattern "^NID\\d{8}$" ;
        ] ]
        [ sh:property [
            sh:path civic:isVerified ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "National ID must include a valid format and verification status." .

:PublicSurveyResponseShape
    a sh:NodeShape ;
    sh:targetClass civic:SurveyResponse ;
    sh:and (
        [ sh:property [
            sh:path civic:questionID ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path civic:answer ;
            sh:datatype xsd:string ;
            sh:minLength 1 ;
        ] ]
        [ sh:property [
            sh:path civic:responseTime ;
            sh:datatype xsd:dateTime ;
        ] ]
    ) ;
    sh:message "Survey response must include question ID, answer, and timestamp." .

:EmploymentStatusReportShape
    a sh:NodeShape ;
    sh:targetClass civic:EmploymentReport ;
    sh:and (
        [ sh:property [
            sh:path civic:isEmployed ;
            sh:datatype xsd:boolean ;
        ] ]
        [ sh:property [
            sh:path civic:employerName ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:sparql [
            a sh:SPARQLConstraint ;
            sh:message "Employer name must be provided if the person is employed." ;
            sh:select """
                SELECT $this
                WHERE {
                    $this civic:isEmployed true .
                    FILTER NOT EXISTS { $this civic:employerName ?n }
                }
            """ ;
        ] ]
    ) ;
    sh:message "Employment report must include employer name if the person is employed." .

:GovernmentProcurementShape
    a sh:NodeShape ;
    sh:targetClass civic:ProcurementContract ;
    sh:and (
        [ sh:property [
            sh:path civic:contractValue ;
            sh:datatype xsd:float ;
            sh:minInclusive 1000.0 ;
        ] ]
        [ sh:property [
            sh:path civic:vendorID ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:awardDate ;
            sh:datatype xsd:date ;
        ] ]
    ) ;
    sh:message "Procurement must include contract value, vendor ID, and award date." .

:DisasterPreparednessPlanShape
    a sh:NodeShape ;
    sh:targetClass civic:PreparednessPlan ;
    sh:and (
        [ sh:property [
            sh:path civic:planName ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
        [ sh:property [
            sh:path civic:lastUpdated ;
            sh:datatype xsd:dateTime ;
        ] ]
        [ sh:property [
            sh:path civic:isActive ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
    ) ;
    sh:message "Preparedness plan must be active and include name and last update." .


## Research Publications Domain 

:TitleShape
    a sh:NodeShape ;
    sh:targetClass pub:Title ;
    sh:property [
        sh:path pub:text ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Title must be a string." .

:AuthorShape
    a sh:NodeShape ;
    sh:targetClass pub:Author ;
    sh:property [
        sh:path pub:name ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Author must have a name." .

:DOIShape
    a sh:NodeShape ;
    sh:targetClass pub:DOI ;
    sh:property [
        sh:path pub:identifier ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "DOI must be present." .

:YearShape
    a sh:NodeShape ;
    sh:targetClass pub:Year ;
    sh:property [
        sh:path pub:year ;
        sh:datatype xsd:gYear ;
    ] ;
    sh:message "Year must be in YYYY format." .

:ConferenceShape
    a sh:NodeShape ;
    sh:targetClass pub:Conference ;
    sh:property [
        sh:path pub:conferenceName ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Conference name must be specified." .

:PageCountShape
    a sh:NodeShape ;
    sh:targetClass pub:PageCount ;
    sh:property [
        sh:path pub:pages ;
        sh:datatype xsd:integer ;
    ] ;
    sh:message "Total pages must be an integer." .

:LanguageShape
    a sh:NodeShape ;
    sh:targetClass pub:Language ;
    sh:property [
        sh:path pub:langCode ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Language must have a code." .

:ISBNShape
    a sh:NodeShape ;
    sh:targetClass pub:ISBN ;
    sh:property [
        sh:path pub:isbnValue ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "ISBN must be present." .

:PublisherShape
    a sh:NodeShape ;
    sh:targetClass pub:Publisher ;
    sh:property [
        sh:path pub:name ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Publisher must have a name." .

:EditorShape
    a sh:NodeShape ;
    sh:targetClass pub:Editor ;
    sh:property [
        sh:path pub:editorName ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Editor name is required." .

:JournalShape
    a sh:NodeShape ;
    sh:targetClass pub:Journal ;
    sh:property [
        sh:path pub:journalName ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Journal name is required." .

:AbstractShape
    a sh:NodeShape ;
    sh:targetClass pub:Abstract ;
    sh:property [
        sh:path pub:abstractText ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Abstract text is required." .

:FieldShape
    a sh:NodeShape ;
    sh:targetClass pub:Field ;
    sh:property [
        sh:path pub:fieldName ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Research field must be specified." .

:AffiliationShape
    a sh:NodeShape ;
    sh:targetClass pub:Affiliation ;
    sh:property [
        sh:path pub:institution ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Affiliation institution must be listed." .

:FundingAgencyShape
    a sh:NodeShape ;
    sh:targetClass pub:Funding ;
    sh:property [
        sh:path pub:agency ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Funding agency must be provided." .

:CountryShape
    a sh:NodeShape ;
    sh:targetClass pub:Country ;
    sh:property [
        sh:path pub:countryCode ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Country code must be present." .

:LicenseShape
    a sh:NodeShape ;
    sh:targetClass pub:License ;
    sh:property [
        sh:path pub:licenseType ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "License type must be declared." .

:KeywordShape
    a sh:NodeShape ;
    sh:targetClass pub:Keyword ;
    sh:property [
        sh:path pub:term ;
        sh:datatype xsd:string ;
    ] ;
    sh:message "Keyword term is required." .

:VolumeShape
    a sh:NodeShape ;
    sh:targetClass pub:Volume ;
    sh:property [
        sh:path pub:volumeNumber ;
        sh:datatype xsd:integer ;
    ] ;
    sh:message "Volume number must be an integer." .

:IssueShape
    a sh:NodeShape ;
    sh:targetClass pub:Issue ;
    sh:property [
        sh:path pub:issueNumber ;
        sh:datatype xsd:integer ;
    ] ;
    sh:message "Issue number must be an integer." .
:DOIFormatShape
    a sh:NodeShape ;
    sh:targetClass pub:DOI ;
    sh:property [
        sh:path pub:identifier ;
        sh:datatype xsd:string ;
        sh:pattern "^10\\.\\d{4,9}/[-._;()/:A-Z0-9]+$" ;
    ] ;
    sh:message "DOI must match the official format." .

:AuthorNameLengthShape
    a sh:NodeShape ;
    sh:targetClass pub:Author ;
    sh:property [
        sh:path pub:name ;
        sh:datatype xsd:string ;
        sh:minLength 3 ;
        sh:maxLength 100 ;
    ] ;
    sh:message "Author name must be 3 to 100 characters long." .

:TitleLengthShape
    a sh:NodeShape ;
    sh:targetClass pub:Title ;
    sh:property [
        sh:path pub:text ;
        sh:datatype xsd:string ;
        sh:minLength 5 ;
        sh:maxLength 250 ;
    ] ;
    sh:message "Title must be 5 to 250 characters long." .

:KeywordListShape
    a sh:NodeShape ;
    sh:targetClass pub:KeywordList ;
    sh:property [
        sh:path pub:keywords ;
        sh:minCount 3 ;
    ] ;
    sh:message "At least three keywords must be provided." .

:PageRangeShape
    a sh:NodeShape ;
    sh:targetClass pub:PageRange ;
    sh:property [
        sh:path pub:endPage ;
        sh:datatype xsd:integer ;
    ] ;
    sh:property [
        sh:path pub:startPage ;
        sh:datatype xsd:integer ;
    ] ;
    sh:message "Start and end pages must be integers." .

:ImpactFactorShape
    a sh:NodeShape ;
    sh:targetClass pub:ImpactFactor ;
    sh:property [
        sh:path pub:score ;
        sh:datatype xsd:float ;
        sh:minInclusive 0.0 ;
        sh:maxInclusive 100.0 ;
    ] ;
    sh:message "Impact factor must be between 0.0 and 100.0." .

:AffiliationAddressShape
    a sh:NodeShape ;
    sh:targetClass pub:Affiliation ;
    sh:property [
        sh:path pub:institutionAddress ;
        sh:datatype xsd:string ;
        sh:minLength 10 ;
    ] ;
    sh:message "Institution address must be at least 10 characters long." .

:AbstractLengthShape
    a sh:NodeShape ;
    sh:targetClass pub:Abstract ;
    sh:property [
        sh:path pub:abstractText ;
        sh:datatype xsd:string ;
        sh:minLength 50 ;
    ] ;
    sh:message "Abstract must be at least 50 characters." .

:SubmissionDateShape
    a sh:NodeShape ;
    sh:targetClass pub:Submission ;
    sh:property [
        sh:path pub:submissionDate ;
        sh:datatype xsd:date ;
    ] ;
    sh:message "Submission must include a date." .

:RevisionCountShape
    a sh:NodeShape ;
    sh:targetClass pub:Revision ;
    sh:property [
        sh:path pub:numberOfRevisions ;
        sh:datatype xsd:integer ;
        sh:minInclusive 0 ;
    ] ;
    sh:message "Number of revisions must be non-negative." .

:LicenseTypeEnumShape
    a sh:NodeShape ;
    sh:targetClass pub:License ;
    sh:property [
        sh:path pub:licenseType ;
        sh:in ("CC-BY" "CC0" "CC-BY-NC" "CC-BY-ND") ;
    ] ;
    sh:message "License must be a recognized Creative Commons type." .

:OpenAccessShape
    a sh:NodeShape ;
    sh:targetClass pub:AccessType ;
    sh:property [
        sh:path pub:isOpenAccess ;
        sh:datatype xsd:boolean ;
    ] ;
    sh:message "Open access status must be true or false." .

:CitationCountShape
    a sh:NodeShape ;
    sh:targetClass pub:CitationCount ;
    sh:property [
        sh:path pub:count ;
        sh:datatype xsd:integer ;
        sh:minInclusive 0 ;
    ] ;
    sh:message "Citation count must be a non-negative integer." .

:CitationFormatShape
    a sh:NodeShape ;
    sh:targetClass pub:Citation ;
    sh:property [
        sh:path pub:citationText ;
        sh:datatype xsd:string ;
        sh:minLength 5 ;
    ] ;
    sh:message "Citation must be a valid text string." .

:JournalISSNShape
    a sh:NodeShape ;
    sh:targetClass pub:Journal ;
    sh:property [
        sh:path pub:issn ;
        sh:datatype xsd:string ;
        sh:pattern "^\\d{4}-\\d{3}[\\dX]$" ;
    ] ;
    sh:message "ISSN must follow the standard pattern." .

:FundingAmountShape
    a sh:NodeShape ;
    sh:targetClass pub:Funding ;
    sh:property [
        sh:path pub:amount ;
        sh:datatype xsd:float ;
        sh:minInclusive 0.0 ;
    ] ;
    sh:message "Funding amount must be non-negative." .

:DatasetLinkShape
    a sh:NodeShape ;
    sh:targetClass pub:DatasetLink ;
    sh:property [
        sh:path pub:downloadURL ;
        sh:datatype xsd:anyURI ;
    ] ;
    sh:message "Dataset link must be a valid URL." .

:CorrespondingAuthorShape
    a sh:NodeShape ;
    sh:targetClass pub:CorrespondingAuthor ;
    sh:property [
        sh:path pub:email ;
        sh:datatype xsd:string ;
        sh:pattern "^.+@.+\\..+$" ;
    ] ;
    sh:message "Corresponding author must have a valid email address." .

:RevisionDateShape
    a sh:NodeShape ;
    sh:targetClass pub:RevisionDate ;
    sh:property [
        sh:path pub:date ;
        sh:datatype xsd:dateTime ;
    ] ;
    sh:message "Revision must include a timestamp." .

:SubmissionStatusShape
    a sh:NodeShape ;
    sh:targetClass pub:Submission ;
    sh:property [
        sh:path pub:status ;
        sh:in ("Submitted" "Accepted" "Rejected" "Under Review") ;
    ] ;
    sh:message "Submission status must be one of the allowed options." .
:AuthorNameConstraintShape
    a sh:NodeShape ;
    sh:targetClass pub:Author ;
    sh:and (
        [ sh:property [
            sh:path pub:firstName ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path pub:lastName ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Author must have both first and last name." .

:OpenAccessLicenseShape
    a sh:NodeShape ;
    sh:targetClass pub:Publication ;
    sh:or (
        [ sh:property [
            sh:path pub:isOpenAccess ;
            sh:hasValue false ;
        ] ]
        [ sh:property [
            sh:path pub:license ;
            sh:datatype xsd:string ;
            sh:minLength 5 ;
        ] ]
    ) ;
    sh:message "If the publication is open access, a license must be included." .

:PageRangeMatchShape
    a sh:NodeShape ;
    sh:targetClass pub:Publication ;
    sh:sparql [
        a sh:SPARQLConstraint ;
        sh:message "Start page must be less than or equal to end page." ;
        sh:select """
            SELECT $this
            WHERE {
                $this pub:startPage ?s ;
                      pub:endPage ?e .
                FILTER (?s > ?e)
            }
        """ ;
    ] .

:MultiIdentifierShape
    a sh:NodeShape ;
    sh:targetClass pub:Publication ;
    sh:or (
        [ sh:property [
            sh:path pub:doi ;
            sh:datatype xsd:string ;
        ] ]
        [ sh:property [
            sh:path pub:arxivID ;
            sh:datatype xsd:string ;
        ] ]
    ) ;
    sh:message "Publication must have either a DOI or an arXiv ID." .

:ConferenceOrJournalShape
    a sh:NodeShape ;
    sh:targetClass pub:Publication ;
    sh:or (
        [ sh:property [
            sh:path pub:publishedInConference ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
        [ sh:property [
            sh:path pub:publishedInJournal ;
            sh:datatype xsd:boolean ;
            sh:hasValue true ;
        ] ]
    ) ;
    sh:message "Publication must be published in either a journal or conference." .

:RevisedVersionShape
    a sh:NodeShape ;
    sh:targetClass pub:Publication ;
    sh:sparql [
        a sh:SPARQLConstraint ;
        sh:message "If revised, revision date must be later than submission date." ;
        sh:select """
            SELECT $this
            WHERE {
                $this pub:submittedOn ?s ;
                      pub:revisedOn ?r .
                FILTER (?r <= ?s)
            }
        """ ;
    ] .

:EthicsComplianceShape
    a sh:NodeShape ;
    sh:targetClass pub:Study ;
    sh:and (
        [ sh:property [
            sh:path pub:hasHumanSubjects ;
            sh:datatype xsd:boolean ;
        ] ]
        [ sh:property [
            sh:path pub:ethicsApproved ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "If study includes humans, it must be ethics-approved." .

:FinalVersionOrDraftShape
    a sh:NodeShape ;
    sh:targetClass pub:Version ;
    sh:or (
        [ sh:property [
            sh:path pub:isFinal ;
            sh:hasValue true ;
        ] ]
        [ sh:property [
            sh:path pub:isDraft ;
            sh:hasValue true ;
        ] ]
    ) ;
    sh:message "Publication version must be either final or draft." .

:DatasetLinkOrStatementShape
    a sh:NodeShape ;
    sh:targetClass pub:Publication ;
    sh:or (
        [ sh:property [
            sh:path pub:hasDataset ;
            sh:datatype xsd:anyURI ;
        ] ]
        [ sh:property [
            sh:path pub:hasNoDataStatement ;
            sh:datatype xsd:string ;
            sh:minLength 10 ;
        ] ]
    ) ;
    sh:message "Include either a dataset link or a no-data availability statement." .

:AuthorContributionShape
    a sh:NodeShape ;
    sh:targetClass pub:Author ;
    sh:and (
        [ sh:property [
            sh:path pub:contributionRole ;
            sh:in ("Writing" "Analysis" "Design" "Supervision") ;
        ] ]
        [ sh:property [
            sh:path pub:isLeadAuthor ;
            sh:datatype xsd:boolean ;
        ] ]
    ) ;
    sh:message "Author must specify contribution role and lead author status." .

